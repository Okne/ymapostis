# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pm', [dirname(__file__)])
        except ImportError:
            import _pm
            return _pm
        if fp is not None:
            try:
                _mod = imp.load_module('_pm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pm = swig_import_helper()
    del swig_import_helper
else:
    import _pm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def next(self): return _pm.iterator_next(self)
    def is_over(self): return _pm.iterator_is_over(self)
    __swig_destroy__ = _pm.delete_iterator
    __del__ = lambda self : None;
iterator_swigregister = _pm.iterator_swigregister
iterator_swigregister(iterator)

SC_ARCH_PAGESIZE = _pm.SC_ARCH_PAGESIZE
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pm.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pm.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pm.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pm.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pm.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pm.SwigPyIterator_equal(self, *args)
    def copy(self): return _pm.SwigPyIterator_copy(self)
    def next(self): return _pm.SwigPyIterator_next(self)
    def __next__(self): return _pm.SwigPyIterator___next__(self)
    def previous(self): return _pm.SwigPyIterator_previous(self)
    def advance(self, *args): return _pm.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pm.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pm.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pm.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pm.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pm.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pm.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class sc_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_iterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def next(self): return _pm.sc_iterator_next(self)
    def is_over(self): return _pm.sc_iterator_is_over(self)
    def value(self, *args): return _pm.sc_iterator_value(self, *args)
    __swig_destroy__ = _pm.delete_sc_iterator
    __del__ = lambda self : None;
sc_iterator_swigregister = _pm.sc_iterator_swigregister
sc_iterator_swigregister(sc_iterator)

class sc_dir_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_dir_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_dir_iterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def value(self): return _pm.sc_dir_iterator_value(self)
    def next(self): return _pm.sc_dir_iterator_next(self)
    def is_over(self): return _pm.sc_dir_iterator_is_over(self)
    __swig_destroy__ = _pm.delete_sc_dir_iterator
    __del__ = lambda self : None;
sc_dir_iterator_swigregister = _pm.sc_dir_iterator_swigregister
sc_dir_iterator_swigregister(sc_dir_iterator)

class sc_segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_segment, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["refcnt"] = _pm.sc_segment_refcnt_set
    __swig_getmethods__["refcnt"] = _pm.sc_segment_refcnt_get
    if _newclass:refcnt = _swig_property(_pm.sc_segment_refcnt_get, _pm.sc_segment_refcnt_set)
    __swig_setmethods__["sign"] = _pm.sc_segment_sign_set
    __swig_getmethods__["sign"] = _pm.sc_segment_sign_get
    if _newclass:sign = _swig_property(_pm.sc_segment_sign_get, _pm.sc_segment_sign_set)
    __swig_setmethods__["index"] = _pm.sc_segment_index_set
    __swig_getmethods__["index"] = _pm.sc_segment_index_get
    if _newclass:index = _swig_property(_pm.sc_segment_index_get, _pm.sc_segment_index_set)
    __swig_setmethods__["dead"] = _pm.sc_segment_dead_set
    __swig_getmethods__["dead"] = _pm.sc_segment_dead_get
    if _newclass:dead = _swig_property(_pm.sc_segment_dead_get, _pm.sc_segment_dead_set)
    __swig_setmethods__["ring_0"] = _pm.sc_segment_ring_0_set
    __swig_getmethods__["ring_0"] = _pm.sc_segment_ring_0_get
    if _newclass:ring_0 = _swig_property(_pm.sc_segment_ring_0_get, _pm.sc_segment_ring_0_set)
    __swig_setmethods__["evstream"] = _pm.sc_segment_evstream_set
    __swig_getmethods__["evstream"] = _pm.sc_segment_evstream_get
    if _newclass:evstream = _swig_property(_pm.sc_segment_evstream_get, _pm.sc_segment_evstream_set)
    __swig_setmethods__["mapcnt"] = _pm.sc_segment_mapcnt_set
    __swig_getmethods__["mapcnt"] = _pm.sc_segment_mapcnt_get
    if _newclass:mapcnt = _swig_property(_pm.sc_segment_mapcnt_get, _pm.sc_segment_mapcnt_set)
    __swig_setmethods__["on_add"] = _pm.sc_segment_on_add_set
    __swig_getmethods__["on_add"] = _pm.sc_segment_on_add_get
    if _newclass:on_add = _swig_property(_pm.sc_segment_on_add_get, _pm.sc_segment_on_add_set)
    __swig_setmethods__["on_remove"] = _pm.sc_segment_on_remove_set
    __swig_getmethods__["on_remove"] = _pm.sc_segment_on_remove_get
    if _newclass:on_remove = _swig_property(_pm.sc_segment_on_remove_get, _pm.sc_segment_on_remove_set)
    def add_on_add(self, *args): return _pm.sc_segment_add_on_add(self, *args)
    def add_on_remove(self, *args): return _pm.sc_segment_add_on_remove(self, *args)
    __swig_destroy__ = _pm.delete_sc_segment
    __del__ = lambda self : None;
    def listen_segment(self, *args): return _pm.sc_segment_listen_segment(self, *args)
    def unlisten_segment(self, *args): return _pm.sc_segment_unlisten_segment(self, *args)
    def ref(self): return _pm.sc_segment_ref(self)
    def unref(self): return _pm.sc_segment_unref(self)
    def die(self): return _pm.sc_segment_die(self)
    def get_type(self, *args): return _pm.sc_segment_get_type(self, *args)
    def change_type(self, *args): return _pm.sc_segment_change_type(self, *args)
    def create_link(self, *args): return _pm.sc_segment_create_link(self, *args)
    def create_link_iterator(self): return _pm.sc_segment_create_link_iterator(self)
    def get_link_target(self, *args): return _pm.sc_segment_get_link_target(self, *args)
    def set_link_target(self, *args): return _pm.sc_segment_set_link_target(self, *args)
    def is_link(self, *args): return _pm.sc_segment_is_link(self, *args)
    def gen_el(self, *args): return _pm.sc_segment_gen_el(self, *args)
    def erase_el(self, *args): return _pm.sc_segment_erase_el(self, *args)
    def get_beg(self, *args): return _pm.sc_segment_get_beg(self, *args)
    def get_end(self, *args): return _pm.sc_segment_get_end(self, *args)
    def set_beg(self, *args): return _pm.sc_segment_set_beg(self, *args)
    def set_end(self, *args): return _pm.sc_segment_set_end(self, *args)
    def get_element_addr(self, *args): return _pm.sc_segment_get_element_addr(self, *args)
    def set_element_addr(self, *args): return _pm.sc_segment_set_element_addr(self, *args)
    def create_input_arcs_iterator(self, *args): return _pm.sc_segment_create_input_arcs_iterator(self, *args)
    def create_output_arcs_iterator(self, *args): return _pm.sc_segment_create_output_arcs_iterator(self, *args)
    def create_iterator_on_elements(self): return _pm.sc_segment_create_iterator_on_elements(self)
    def get_content(self, *args): return _pm.sc_segment_get_content(self, *args)
    def get_content_const(self, *args): return _pm.sc_segment_get_content_const(self, *args)
    def set_content(self, *args): return _pm.sc_segment_set_content(self, *args)
    def erase_content(self, *args): return _pm.sc_segment_erase_content(self, *args)
    def get_idtf(self, *args): return _pm.sc_segment_get_idtf(self, *args)
    def set_idtf(self, *args): return _pm.sc_segment_set_idtf(self, *args)
    def erase_idtf(self, *args): return _pm.sc_segment_erase_idtf(self, *args)
    def has_erased_idtf(self, *args): return _pm.sc_segment_has_erased_idtf(self, *args)
    def find_by_idtf(self, *args): return _pm.sc_segment_find_by_idtf(self, *args)
    def get_out_qnt(self, *args): return _pm.sc_segment_get_out_qnt(self, *args)
    def get_in_qnt(self, *args): return _pm.sc_segment_get_in_qnt(self, *args)
    def get_full_uri(self): return _pm.sc_segment_get_full_uri(self)
sc_segment_swigregister = _pm.sc_segment_swigregister
sc_segment_swigregister(sc_segment)

class sc_session(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_session, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_session, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["error"] = _pm.sc_session_error_set
    __swig_getmethods__["error"] = _pm.sc_session_error_get
    if _newclass:error = _swig_property(_pm.sc_session_error_get, _pm.sc_session_error_set)
    def get_segment_set(self): return _pm.sc_session_get_segment_set(self)
    __swig_destroy__ = _pm.delete_sc_session
    __del__ = lambda self : None;
    def ref(self): return _pm.sc_session_ref(self)
    def unref(self): return _pm.sc_session_unref(self)
    def close(self): return _pm.sc_session_close(self)
    def get_error(self): return _pm.sc_session_get_error(self)
    def __move_element(self, *args): return _pm.sc_session___move_element(self, *args)
    def is_segment_opened(self, *args): return _pm.sc_session_is_segment_opened(self, *args)
    def create_segment(self, *args): return _pm.sc_session_create_segment(self, *args)
    def open_segment(self, *args): return _pm.sc_session_open_segment(self, *args)
    def open_segment_spider(self, *args): return _pm.sc_session_open_segment_spider(self, *args)
    def _stat(self, *args): return _pm.sc_session__stat(self, *args)
    def close_segment(self, *args): return _pm.sc_session_close_segment(self, *args)
    def unlink(self, *args): return _pm.sc_session_unlink(self, *args)
    def rename(self, *args): return _pm.sc_session_rename(self, *args)
    def mkdir(self, *args): return _pm.sc_session_mkdir(self, *args)
    def chdir(self, *args): return _pm.sc_session_chdir(self, *args)
    def search_dir(self, *args): return _pm.sc_session_search_dir(self, *args)
    def find_segment(self, *args): return _pm.sc_session_find_segment(self, *args)
    def get_end(self, *args): return _pm.sc_session_get_end(self, *args)
    def get_beg(self, *args): return _pm.sc_session_get_beg(self, *args)
    def set_beg(self, *args): return _pm.sc_session_set_beg(self, *args)
    def set_end(self, *args): return _pm.sc_session_set_end(self, *args)
    def get_beg_spin(self, *args): return _pm.sc_session_get_beg_spin(self, *args)
    def get_end_spin(self, *args): return _pm.sc_session_get_end_spin(self, *args)
    def create_iterator(self, *args): return _pm.sc_session_create_iterator(self, *args)
    def create_el(self, *args): return _pm.sc_session_create_el(self, *args)
    def gen3_f_a_f(self, *args): return _pm.sc_session_gen3_f_a_f(self, *args)
    def gen5_f_a_f_a_f(self, *args): return _pm.sc_session_gen5_f_a_f_a_f(self, *args)
    def attach_wait(self, *args): return _pm.sc_session_attach_wait(self, *args)
    def attach_good_wait(self, *args): return _pm.sc_session_attach_good_wait(self, *args)
    def detach_wait(self, *args): return _pm.sc_session_detach_wait(self, *args)
    def get_type(self, *args): return _pm.sc_session_get_type(self, *args)
    def change_type(self, *args): return _pm.sc_session_change_type(self, *args)
    def erase_el(self, *args): return _pm.sc_session_erase_el(self, *args)
    def get_idtf(self, *args): return _pm.sc_session_get_idtf(self, *args)
    def set_idtf(self, *args): return _pm.sc_session_set_idtf(self, *args)
    def erase_idtf(self, *args): return _pm.sc_session_erase_idtf(self, *args)
    def find_by_idtf(self, *args): return _pm.sc_session_find_by_idtf(self, *args)
    def get_content(self, *args): return _pm.sc_session_get_content(self, *args)
    def get_content_const(self, *args): return _pm.sc_session_get_content_const(self, *args)
    def set_content(self, *args): return _pm.sc_session_set_content(self, *args)
    def erase_content(self, *args): return _pm.sc_session_erase_content(self, *args)
    def get_out_qnt(self, *args): return _pm.sc_session_get_out_qnt(self, *args)
    def get_in_qnt(self, *args): return _pm.sc_session_get_in_qnt(self, *args)
    def activate(self, *args): return _pm.sc_session_activate(self, *args)
    def reimplement(self, *args): return _pm.sc_session_reimplement(self, *args)
    def uri2sign(self, *args): return _pm.sc_session_uri2sign(self, *args)
    def sign2uri(self, *args): return _pm.sc_session_sign2uri(self, *args)
    def __fork(self): return _pm.sc_session___fork(self)
    def commit(self): return _pm.sc_session_commit(self)
    def rollback(self): return _pm.sc_session_rollback(self)
    def erase_el_pre(self, *args): return _pm.sc_session_erase_el_pre(self, *args)
    def __erase_el(self, *args): return _pm.sc_session___erase_el(self, *args)
sc_session_swigregister = _pm.sc_session_swigregister
sc_session_swigregister(sc_session)


def libsc_login():
  return _pm.libsc_login()
libsc_login = _pm.libsc_login

def libsc_deinit():
  return _pm.libsc_deinit()
libsc_deinit = _pm.libsc_deinit

def libsc_flush():
  return _pm.libsc_flush()
libsc_flush = _pm.libsc_flush

def new_sc_global_addrp():
  return _pm.new_sc_global_addrp()
new_sc_global_addrp = _pm.new_sc_global_addrp

def copy_sc_global_addrp(*args):
  return _pm.copy_sc_global_addrp(*args)
copy_sc_global_addrp = _pm.copy_sc_global_addrp

def delete_sc_global_addrp(*args):
  return _pm.delete_sc_global_addrp(*args)
delete_sc_global_addrp = _pm.delete_sc_global_addrp

def sc_global_addrp_assign(*args):
  return _pm.sc_global_addrp_assign(*args)
sc_global_addrp_assign = _pm.sc_global_addrp_assign

def sc_global_addrp_value(*args):
  return _pm.sc_global_addrp_value(*args)
sc_global_addrp_value = _pm.sc_global_addrp_value
class sc_addr_ll_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_addr_ll_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_addr_ll_struct, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pm.new_sc_addr_ll_struct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_addr_ll_struct
    __del__ = lambda self : None;
sc_addr_ll_struct_swigregister = _pm.sc_addr_ll_struct_swigregister
sc_addr_ll_struct_swigregister(sc_addr_ll_struct)

def libsc_init(use_fs_repo = 0):
  return _pm.libsc_init(use_fs_repo)
libsc_init = _pm.libsc_init
cvar = _pm.cvar

SCADDR_LL_NIL = _pm.SCADDR_LL_NIL
SCADDR_NIL = _pm.SCADDR_NIL
SC_EMPTY = _pm.SC_EMPTY
SC_CONST = _pm.SC_CONST
SC_VAR = _pm.SC_VAR
SC_METAVAR = _pm.SC_METAVAR
SC_POS = _pm.SC_POS
SC_NEG = _pm.SC_NEG
SC_FUZ = _pm.SC_FUZ
SC_UNDF = _pm.SC_UNDF
SC_ARC = _pm.SC_ARC
SC_NODE = _pm.SC_NODE
SC_TEMPORARY = _pm.SC_TEMPORARY
SC_PERMANENT = _pm.SC_PERMANENT
SC_PHANTOM = _pm.SC_PHANTOM
SC_ACTUAL = _pm.SC_ACTUAL
SC_FACTUAL = _pm.SC_FACTUAL
SC_PERMANENCY = _pm.SC_PERMANENCY
SC_ACTUALITY = _pm.SC_ACTUALITY
SC_FUZZYNESS = _pm.SC_FUZZYNESS
SC_ELMNCLASS = _pm.SC_ELMNCLASS
SC_CONSTANCY = _pm.SC_CONSTANCY
SC_U_CONST = _pm.SC_U_CONST
SC_U_VAR = _pm.SC_U_VAR
SC_U_METAVAR = _pm.SC_U_METAVAR
SC_N_CONST = _pm.SC_N_CONST
SC_N_VAR = _pm.SC_N_VAR
SC_N_METAVAR = _pm.SC_N_METAVAR
SC_A_CONST = _pm.SC_A_CONST
SC_A_VAR = _pm.SC_A_VAR
SC_A_METAVAR = _pm.SC_A_METAVAR
SC_UNCR = _pm.SC_UNCR
SC_A_PRMN = _pm.SC_A_PRMN
SC_A_TMPR = _pm.SC_A_TMPR
SC_T_DFLT = _pm.SC_T_DFLT
SC_R_DFLT = _pm.SC_R_DFLT
SC_XPERMANENCY = _pm.SC_XPERMANENCY
SC_POOR_MASK = _pm.SC_POOR_MASK

def __check_sc_type(*args):
  return _pm.__check_sc_type(*args)
__check_sc_type = _pm.__check_sc_type

def sc_type_extend_mask_group(*args):
  return _pm.sc_type_extend_mask_group(*args)
sc_type_extend_mask_group = _pm.sc_type_extend_mask_group

def sc_type_extend_mask(*args):
  return _pm.sc_type_extend_mask(*args)
sc_type_extend_mask = _pm.sc_type_extend_mask

def check_sc_type(*args):
  return _pm.check_sc_type(*args)
check_sc_type = _pm.check_sc_type
RV_OK = _pm.RV_OK
RV_THEN = _pm.RV_THEN
RV_ERR_GEN = _pm.RV_ERR_GEN
RV_ELSE_GEN = _pm.RV_ELSE_GEN
class sc_param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pm.sc_param_type_set
    __swig_getmethods__["type"] = _pm.sc_param_type_get
    if _newclass:type = _swig_property(_pm.sc_param_type_get, _pm.sc_param_type_set)
    __swig_setmethods__["addr"] = _pm.sc_param_addr_set
    __swig_getmethods__["addr"] = _pm.sc_param_addr_get
    if _newclass:addr = _swig_property(_pm.sc_param_addr_get, _pm.sc_param_addr_set)
    __swig_setmethods__["i"] = _pm.sc_param_i_set
    __swig_getmethods__["i"] = _pm.sc_param_i_get
    if _newclass:i = _swig_property(_pm.sc_param_i_get, _pm.sc_param_i_set)
    __swig_setmethods__["seg"] = _pm.sc_param_seg_set
    __swig_getmethods__["seg"] = _pm.sc_param_seg_get
    if _newclass:seg = _swig_property(_pm.sc_param_seg_get, _pm.sc_param_seg_set)
    def __init__(self): 
        this = _pm.new_sc_param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_param
    __del__ = lambda self : None;
sc_param_swigregister = _pm.sc_param_swigregister
sc_param_swigregister(sc_param)

class sc_activity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_activity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_activity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["ctx"] = _pm.sc_activity_ctx_set
    __swig_getmethods__["ctx"] = _pm.sc_activity_ctx_get
    if _newclass:ctx = _swig_property(_pm.sc_activity_ctx_get, _pm.sc_activity_ctx_set)
    __swig_setmethods__["on_main_stack"] = _pm.sc_activity_on_main_stack_set
    __swig_getmethods__["on_main_stack"] = _pm.sc_activity_on_main_stack_get
    if _newclass:on_main_stack = _swig_property(_pm.sc_activity_on_main_stack_get, _pm.sc_activity_on_main_stack_set)
    __swig_setmethods__["sched_added"] = _pm.sc_activity_sched_added_set
    __swig_getmethods__["sched_added"] = _pm.sc_activity_sched_added_get
    if _newclass:sched_added = _swig_property(_pm.sc_activity_sched_added_get, _pm.sc_activity_sched_added_set)
    def init(self, *args): return _pm.sc_activity_init(self, *args)
    def is_on_main_stack(self): return _pm.sc_activity_is_on_main_stack(self)
    def done(self): return _pm.sc_activity_done(self)
    def activate(self, *args): return _pm.sc_activity_activate(self, *args)
    __swig_destroy__ = _pm.delete_sc_activity
    __del__ = lambda self : None;
sc_activity_swigregister = _pm.sc_activity_swigregister
sc_activity_swigregister(sc_activity)


def malloc_char(*args):
  return _pm.malloc_char(*args)
malloc_char = _pm.malloc_char

def calloc_char(*args):
  return _pm.calloc_char(*args)
calloc_char = _pm.calloc_char

def realloc_char(*args):
  return _pm.realloc_char(*args)
realloc_char = _pm.realloc_char

def free_char(*args):
  return _pm.free_char(*args)
free_char = _pm.free_char
sizeof_char = _pm.sizeof_char

def malloc_void(*args):
  return _pm.malloc_void(*args)
malloc_void = _pm.malloc_void

def calloc_void(*args):
  return _pm.calloc_void(*args)
calloc_void = _pm.calloc_void

def realloc_void(*args):
  return _pm.realloc_void(*args)
realloc_void = _pm.realloc_void

def free_void(*args):
  return _pm.free_void(*args)
free_void = _pm.free_void
class charArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pm.new_charArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_charArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pm.charArray___getitem__(self, *args)
    def __setitem__(self, *args): return _pm.charArray___setitem__(self, *args)
    def cast(self): return _pm.charArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pm.charArray_frompointer
    if _newclass:frompointer = staticmethod(_pm.charArray_frompointer)
charArray_swigregister = _pm.charArray_swigregister
charArray_swigregister(charArray)

def charArray_frompointer(*args):
  return _pm.charArray_frompointer(*args)
charArray_frompointer = _pm.charArray_frompointer

class bindata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bindata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bindata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _pm.bindata_size_set
    __swig_getmethods__["size"] = _pm.bindata_size_get
    if _newclass:size = _swig_property(_pm.bindata_size_get, _pm.bindata_size_set)
    __swig_setmethods__["ptr"] = _pm.bindata_ptr_set
    __swig_getmethods__["ptr"] = _pm.bindata_ptr_get
    if _newclass:ptr = _swig_property(_pm.bindata_ptr_get, _pm.bindata_ptr_set)
    def __init__(self): 
        this = _pm.new_bindata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_bindata
    __del__ = lambda self : None;
bindata_swigregister = _pm.bindata_swigregister
bindata_swigregister(bindata)

class Cont(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cont, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cont, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _pm.Cont_i_set
    __swig_getmethods__["i"] = _pm.Cont_i_get
    if _newclass:i = _swig_property(_pm.Cont_i_get, _pm.Cont_i_set)
    __swig_setmethods__["r"] = _pm.Cont_r_set
    __swig_getmethods__["r"] = _pm.Cont_r_get
    if _newclass:r = _swig_property(_pm.Cont_r_get, _pm.Cont_r_set)
    __swig_setmethods__["d"] = _pm.Cont_d_set
    __swig_getmethods__["d"] = _pm.Cont_d_get
    if _newclass:d = _swig_property(_pm.Cont_d_get, _pm.Cont_d_set)
    __swig_getmethods__["integer"] = lambda x: _pm.Cont_integer
    if _newclass:integer = staticmethod(_pm.Cont_integer)
    __swig_getmethods__["real"] = lambda x: _pm.Cont_real
    if _newclass:real = staticmethod(_pm.Cont_real)
    __swig_getmethods__["data"] = lambda x: _pm.Cont_data
    if _newclass:data = staticmethod(_pm.Cont_data)
    __swig_getmethods__["string"] = lambda x: _pm.Cont_string
    if _newclass:string = staticmethod(_pm.Cont_string)
    __swig_getmethods__["lazy_data"] = lambda x: _pm.Cont_lazy_data
    if _newclass:lazy_data = staticmethod(_pm.Cont_lazy_data)
    def __init__(self): 
        this = _pm.new_Cont()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_Cont
    __del__ = lambda self : None;
Cont_swigregister = _pm.Cont_swigregister
Cont_swigregister(Cont)

def Cont_integer(*args):
  return _pm.Cont_integer(*args)
Cont_integer = _pm.Cont_integer

def Cont_real(*args):
  return _pm.Cont_real(*args)
Cont_real = _pm.Cont_real

def Cont_data(*args):
  return _pm.Cont_data(*args)
Cont_data = _pm.Cont_data

def Cont_string(*args):
  return _pm.Cont_string(*args)
Cont_string = _pm.Cont_string

def Cont_lazy_data(*args):
  return _pm.Cont_lazy_data(*args)
Cont_lazy_data = _pm.Cont_lazy_data

TCSTRING = _pm.TCSTRING
TCINT = _pm.TCINT
TCREAL = _pm.TCREAL
TCDATA = _pm.TCDATA
TCLAZY = _pm.TCLAZY
TCEMPTY = _pm.TCEMPTY
class Content(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Content, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Content, name)
    __repr__ = _swig_repr
    def convertToCont(self): return _pm.Content_convertToCont(self)
    def __init__(self, *args): 
        this = _pm.new_Content(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_Content
    __del__ = lambda self : None;
    def eraseCont(self): return _pm.Content_eraseCont(self)
    def convertToChar(self): return _pm.Content_convertToChar(self)
    def __eq__(self, *args): return _pm.Content___eq__(self, *args)
    def __gt__(self, *args): return _pm.Content___gt__(self, *args)
    def __lt__(self, *args): return _pm.Content___lt__(self, *args)
    def __ne__(self, *args): return _pm.Content___ne__(self, *args)
    def type(self): return _pm.Content_type(self)
    def set_type(self, *args): return _pm.Content_set_type(self, *args)
    __swig_getmethods__["integer"] = lambda x: _pm.Content_integer
    if _newclass:integer = staticmethod(_pm.Content_integer)
    __swig_getmethods__["real"] = lambda x: _pm.Content_real
    if _newclass:real = staticmethod(_pm.Content_real)
    __swig_getmethods__["string"] = lambda x: _pm.Content_string
    if _newclass:string = staticmethod(_pm.Content_string)
    __swig_getmethods__["data"] = lambda x: _pm.Content_data
    if _newclass:data = staticmethod(_pm.Content_data)
    def get_size(self): return _pm.Content_get_size(self)
    def get_data(self, *args): return _pm.Content_get_data(self, *args)
    def StrToData(self, *args): return _pm.Content_StrToData(self, *args)
    def DataToStr(self, *args): return _pm.Content_DataToStr(self, *args)
Content_swigregister = _pm.Content_swigregister
Content_swigregister(Content)

def Content_integer(*args):
  return _pm.Content_integer(*args)
Content_integer = _pm.Content_integer

def Content_real(*args):
  return _pm.Content_real(*args)
Content_real = _pm.Content_real

def Content_string(*args):
  return _pm.Content_string(*args)
Content_string = _pm.Content_string

def Content_data(*args):
  return _pm.Content_data(*args)
Content_data = _pm.Content_data


def cdata(*args):
  return _pm.cdata(*args)
cdata = _pm.cdata

def memmove(*args):
  return _pm.memmove(*args)
memmove = _pm.memmove

def cdata_char(*args):
  return _pm.cdata_char(*args)
cdata_char = _pm.cdata_char

def castChar_p(*args):
  return _pm.castChar_p(*args)
castChar_p = _pm.castChar_p

def castCharPtoVoidP(*args):
  return _pm.castCharPtoVoidP(*args)
castCharPtoVoidP = _pm.castCharPtoVoidP

def saveContentToFile(*args):
  return _pm.saveContentToFile(*args)
saveContentToFile = _pm.saveContentToFile

def create_unique_segment(*args):
  return _pm.create_unique_segment(*args)
create_unique_segment = _pm.create_unique_segment

def create_unique_dir(*args):
  return _pm.create_unique_dir(*args)
create_unique_dir = _pm.create_unique_dir

def is_segment(*args):
  return _pm.is_segment(*args)
is_segment = _pm.is_segment

def seg2sign(*args):
  return _pm.seg2sign(*args)
seg2sign = _pm.seg2sign

def sign2seg(*args):
  return _pm.sign2seg(*args)
sign2seg = _pm.sign2seg

def create_segment_full_path(*args):
  return _pm.create_segment_full_path(*args)
create_segment_full_path = _pm.create_segment_full_path

def copy_segment(*args):
  return _pm.copy_segment(*args)
copy_segment = _pm.copy_segment

def copy_segment_content(*args):
  return _pm.copy_segment_content(*args)
copy_segment_content = _pm.copy_segment_content

def mkdir_by_full_uri(*args):
  return _pm.mkdir_by_full_uri(*args)
mkdir_by_full_uri = _pm.mkdir_by_full_uri
SC_PD_TYPE = _pm.SC_PD_TYPE
SC_PD_ADDR = _pm.SC_PD_ADDR
SC_PD_INT = _pm.SC_PD_INT
SC_PD_ADDR_0 = _pm.SC_PD_ADDR_0
SC_PD_SET = _pm.SC_PD_SET
SC_PD_SEGMENT = _pm.SC_PD_SEGMENT
SC_PD_BOOLEAN = _pm.SC_PD_BOOLEAN
class sc_param_specArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_param_specArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_param_specArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pm.new_sc_param_specArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_param_specArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pm.sc_param_specArray___getitem__(self, *args)
    def __setitem__(self, *args): return _pm.sc_param_specArray___setitem__(self, *args)
    def cast(self): return _pm.sc_param_specArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pm.sc_param_specArray_frompointer
    if _newclass:frompointer = staticmethod(_pm.sc_param_specArray_frompointer)
sc_param_specArray_swigregister = _pm.sc_param_specArray_swigregister
sc_param_specArray_swigregister(sc_param_specArray)

def open_segset(*args):
  return _pm.open_segset(*args)
open_segset = _pm.open_segset

def sc_param_specArray_frompointer(*args):
  return _pm.sc_param_specArray_frompointer(*args)
sc_param_specArray_frompointer = _pm.sc_param_specArray_frompointer

class sc_paramArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_paramArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_paramArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pm.new_sc_paramArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_paramArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pm.sc_paramArray___getitem__(self, *args)
    def __setitem__(self, *args): return _pm.sc_paramArray___setitem__(self, *args)
    def cast(self): return _pm.sc_paramArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pm.sc_paramArray_frompointer
    if _newclass:frompointer = staticmethod(_pm.sc_paramArray_frompointer)
sc_paramArray_swigregister = _pm.sc_paramArray_swigregister
sc_paramArray_swigregister(sc_paramArray)

def sc_paramArray_frompointer(*args):
  return _pm.sc_paramArray_frompointer(*args)
sc_paramArray_frompointer = _pm.sc_paramArray_frompointer

class sc_constraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_constraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_constraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pm.sc_constraint_id_set
    __swig_getmethods__["id"] = _pm.sc_constraint_id_get
    if _newclass:id = _swig_property(_pm.sc_constraint_id_get, _pm.sc_constraint_id_set)
    __swig_setmethods__["params"] = _pm.sc_constraint_params_set
    __swig_getmethods__["params"] = _pm.sc_constraint_params_get
    if _newclass:params = _swig_property(_pm.sc_constraint_params_get, _pm.sc_constraint_params_set)
    def __init__(self): 
        this = _pm.new_sc_constraint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_constraint
    __del__ = lambda self : None;
sc_constraint_swigregister = _pm.sc_constraint_swigregister
sc_constraint_swigregister(sc_constraint)

SCD_RETURN = _pm.SCD_RETURN
SCD_FILTER = _pm.SCD_FILTER
SCD_CONSTR = _pm.SCD_CONSTR
SCD_FUNC = _pm.SCD_FUNC
SCD_SET_EACH = _pm.SCD_SET_EACH
class sc_deconstruct_prg_item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_deconstruct_prg_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_deconstruct_prg_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pm.sc_deconstruct_prg_item_type_set
    __swig_getmethods__["type"] = _pm.sc_deconstruct_prg_item_type_get
    if _newclass:type = _swig_property(_pm.sc_deconstruct_prg_item_type_get, _pm.sc_deconstruct_prg_item_type_set)
    __swig_setmethods__["in_cnt"] = _pm.sc_deconstruct_prg_item_in_cnt_set
    __swig_getmethods__["in_cnt"] = _pm.sc_deconstruct_prg_item_in_cnt_get
    if _newclass:in_cnt = _swig_property(_pm.sc_deconstruct_prg_item_in_cnt_get, _pm.sc_deconstruct_prg_item_in_cnt_set)
    __swig_setmethods__["params_in"] = _pm.sc_deconstruct_prg_item_params_in_set
    __swig_getmethods__["params_in"] = _pm.sc_deconstruct_prg_item_params_in_get
    if _newclass:params_in = _swig_property(_pm.sc_deconstruct_prg_item_params_in_get, _pm.sc_deconstruct_prg_item_params_in_set)
    __swig_setmethods__["out_cnt"] = _pm.sc_deconstruct_prg_item_out_cnt_set
    __swig_getmethods__["out_cnt"] = _pm.sc_deconstruct_prg_item_out_cnt_get
    if _newclass:out_cnt = _swig_property(_pm.sc_deconstruct_prg_item_out_cnt_get, _pm.sc_deconstruct_prg_item_out_cnt_set)
    __swig_setmethods__["params_out"] = _pm.sc_deconstruct_prg_item_params_out_set
    __swig_getmethods__["params_out"] = _pm.sc_deconstruct_prg_item_params_out_get
    if _newclass:params_out = _swig_property(_pm.sc_deconstruct_prg_item_params_out_get, _pm.sc_deconstruct_prg_item_params_out_set)
    __swig_setmethods__["name"] = _pm.sc_deconstruct_prg_item_name_set
    __swig_getmethods__["name"] = _pm.sc_deconstruct_prg_item_name_get
    if _newclass:name = _swig_property(_pm.sc_deconstruct_prg_item_name_get, _pm.sc_deconstruct_prg_item_name_set)
    __swig_setmethods__["id"] = _pm.sc_deconstruct_prg_item_id_set
    __swig_getmethods__["id"] = _pm.sc_deconstruct_prg_item_id_get
    if _newclass:id = _swig_property(_pm.sc_deconstruct_prg_item_id_get, _pm.sc_deconstruct_prg_item_id_set)
    def __init__(self): 
        this = _pm.new_sc_deconstruct_prg_item()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_deconstruct_prg_item
    __del__ = lambda self : None;
sc_deconstruct_prg_item_swigregister = _pm.sc_deconstruct_prg_item_swigregister
sc_deconstruct_prg_item_swigregister(sc_deconstruct_prg_item)

class sc_deconstruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_deconstruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_deconstruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input_cnt"] = _pm.sc_deconstruct_input_cnt_set
    __swig_getmethods__["input_cnt"] = _pm.sc_deconstruct_input_cnt_get
    if _newclass:input_cnt = _swig_property(_pm.sc_deconstruct_input_cnt_get, _pm.sc_deconstruct_input_cnt_set)
    __swig_setmethods__["reg_cnt"] = _pm.sc_deconstruct_reg_cnt_set
    __swig_getmethods__["reg_cnt"] = _pm.sc_deconstruct_reg_cnt_get
    if _newclass:reg_cnt = _swig_property(_pm.sc_deconstruct_reg_cnt_get, _pm.sc_deconstruct_reg_cnt_set)
    __swig_setmethods__["commands_len"] = _pm.sc_deconstruct_commands_len_set
    __swig_getmethods__["commands_len"] = _pm.sc_deconstruct_commands_len_get
    if _newclass:commands_len = _swig_property(_pm.sc_deconstruct_commands_len_get, _pm.sc_deconstruct_commands_len_set)
    __swig_setmethods__["commands"] = _pm.sc_deconstruct_commands_set
    __swig_getmethods__["commands"] = _pm.sc_deconstruct_commands_get
    if _newclass:commands = _swig_property(_pm.sc_deconstruct_commands_get, _pm.sc_deconstruct_commands_set)
    def __init__(self): 
        this = _pm.new_sc_deconstruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_deconstruct
    __del__ = lambda self : None;
sc_deconstruct_swigregister = _pm.sc_deconstruct_swigregister
sc_deconstruct_swigregister(sc_deconstruct)

class sc_constraint_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_constraint_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_constraint_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pm.sc_constraint_info_id_set
    __swig_getmethods__["id"] = _pm.sc_constraint_info_id_get
    if _newclass:id = _swig_property(_pm.sc_constraint_info_id_get, _pm.sc_constraint_info_id_set)
    __swig_setmethods__["name"] = _pm.sc_constraint_info_name_set
    __swig_getmethods__["name"] = _pm.sc_constraint_info_name_get
    if _newclass:name = _swig_property(_pm.sc_constraint_info_name_get, _pm.sc_constraint_info_name_set)
    __swig_setmethods__["input_cnt"] = _pm.sc_constraint_info_input_cnt_set
    __swig_getmethods__["input_cnt"] = _pm.sc_constraint_info_input_cnt_get
    if _newclass:input_cnt = _swig_property(_pm.sc_constraint_info_input_cnt_get, _pm.sc_constraint_info_input_cnt_set)
    __swig_setmethods__["input_spec"] = _pm.sc_constraint_info_input_spec_set
    __swig_getmethods__["input_spec"] = _pm.sc_constraint_info_input_spec_get
    if _newclass:input_spec = _swig_property(_pm.sc_constraint_info_input_spec_get, _pm.sc_constraint_info_input_spec_set)
    __swig_setmethods__["fix_cnt"] = _pm.sc_constraint_info_fix_cnt_set
    __swig_getmethods__["fix_cnt"] = _pm.sc_constraint_info_fix_cnt_get
    if _newclass:fix_cnt = _swig_property(_pm.sc_constraint_info_fix_cnt_get, _pm.sc_constraint_info_fix_cnt_set)
    __swig_setmethods__["fix_params"] = _pm.sc_constraint_info_fix_params_set
    __swig_getmethods__["fix_params"] = _pm.sc_constraint_info_fix_params_get
    if _newclass:fix_params = _swig_property(_pm.sc_constraint_info_fix_params_get, _pm.sc_constraint_info_fix_params_set)
    __swig_setmethods__["factory"] = _pm.sc_constraint_info_factory_set
    __swig_getmethods__["factory"] = _pm.sc_constraint_info_factory_get
    if _newclass:factory = _swig_property(_pm.sc_constraint_info_factory_get, _pm.sc_constraint_info_factory_set)
    __swig_setmethods__["deconstruct"] = _pm.sc_constraint_info_deconstruct_set
    __swig_getmethods__["deconstruct"] = _pm.sc_constraint_info_deconstruct_get
    if _newclass:deconstruct = _swig_property(_pm.sc_constraint_info_deconstruct_get, _pm.sc_constraint_info_deconstruct_set)
    def __init__(self): 
        this = _pm.new_sc_constraint_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_constraint_info
    __del__ = lambda self : None;
sc_constraint_info_swigregister = _pm.sc_constraint_info_swigregister
sc_constraint_info_swigregister(sc_constraint_info)

class sc_filter_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_filter_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_filter_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pm.sc_filter_info_id_set
    __swig_getmethods__["id"] = _pm.sc_filter_info_id_get
    if _newclass:id = _swig_property(_pm.sc_filter_info_id_get, _pm.sc_filter_info_id_set)
    __swig_setmethods__["name"] = _pm.sc_filter_info_name_set
    __swig_getmethods__["name"] = _pm.sc_filter_info_name_get
    if _newclass:name = _swig_property(_pm.sc_filter_info_name_get, _pm.sc_filter_info_name_set)
    __swig_setmethods__["filter"] = _pm.sc_filter_info_filter_set
    __swig_getmethods__["filter"] = _pm.sc_filter_info_filter_get
    if _newclass:filter = _swig_property(_pm.sc_filter_info_filter_get, _pm.sc_filter_info_filter_set)
    def __init__(self): 
        this = _pm.new_sc_filter_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_filter_info
    __del__ = lambda self : None;
sc_filter_info_swigregister = _pm.sc_filter_info_swigregister
sc_filter_info_swigregister(sc_filter_info)

class sc_func_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_func_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_func_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pm.sc_func_info_id_set
    __swig_getmethods__["id"] = _pm.sc_func_info_id_get
    if _newclass:id = _swig_property(_pm.sc_func_info_id_get, _pm.sc_func_info_id_set)
    __swig_setmethods__["name"] = _pm.sc_func_info_name_set
    __swig_getmethods__["name"] = _pm.sc_func_info_name_get
    if _newclass:name = _swig_property(_pm.sc_func_info_name_get, _pm.sc_func_info_name_set)
    __swig_setmethods__["func"] = _pm.sc_func_info_func_set
    __swig_getmethods__["func"] = _pm.sc_func_info_func_get
    if _newclass:func = _swig_property(_pm.sc_func_info_func_get, _pm.sc_func_info_func_set)
    def __init__(self): 
        this = _pm.new_sc_func_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_func_info
    __del__ = lambda self : None;
sc_func_info_swigregister = _pm.sc_func_info_swigregister
sc_func_info_swigregister(sc_func_info)


def sc_constraint_init():
  return _pm.sc_constraint_init()
sc_constraint_init = _pm.sc_constraint_init

def sc_constraint_done():
  return _pm.sc_constraint_done()
sc_constraint_done = _pm.sc_constraint_done

def sc_constraint_register(*args):
  return _pm.sc_constraint_register(*args)
sc_constraint_register = _pm.sc_constraint_register

def sc_constraint_register_filter(*args):
  return _pm.sc_constraint_register_filter(*args)
sc_constraint_register_filter = _pm.sc_constraint_register_filter

def sc_constraint_register_function(*args):
  return _pm.sc_constraint_register_function(*args)
sc_constraint_register_function = _pm.sc_constraint_register_function

def sc_constraint_create_iterator(*args):
  return _pm.sc_constraint_create_iterator(*args)
sc_constraint_create_iterator = _pm.sc_constraint_create_iterator

def sc_constraint_alloc(*args):
  return _pm.sc_constraint_alloc(*args)
sc_constraint_alloc = _pm.sc_constraint_alloc

def sc_constraint_new(*args):
  return _pm.sc_constraint_new(*args)
sc_constraint_new = _pm.sc_constraint_new

def sc_constraint_new_by_name(*args):
  return _pm.sc_constraint_new_by_name(*args)
sc_constraint_new_by_name = _pm.sc_constraint_new_by_name

def sc_constraint_new_valist(*args):
  return _pm.sc_constraint_new_valist(*args)
sc_constraint_new_valist = _pm.sc_constraint_new_valist

def sc_constraint_clone(*args):
  return _pm.sc_constraint_clone(*args)
sc_constraint_clone = _pm.sc_constraint_clone

def sc_constraint_newv(*args):
  return _pm.sc_constraint_newv(*args)
sc_constraint_newv = _pm.sc_constraint_newv

def sc_constraint_newa(*args):
  return _pm.sc_constraint_newa(*args)
sc_constraint_newa = _pm.sc_constraint_newa

def sc_constraint_new_by_info(*args):
  return _pm.sc_constraint_new_by_info(*args)
sc_constraint_new_by_info = _pm.sc_constraint_new_by_info

def sc_constraint_free(*args):
  return _pm.sc_constraint_free(*args)
sc_constraint_free = _pm.sc_constraint_free

def sc_constraint_get_info(*args):
  return _pm.sc_constraint_get_info(*args)
sc_constraint_get_info = _pm.sc_constraint_get_info

def sc_constraint_get_id_by_name(*args):
  return _pm.sc_constraint_get_id_by_name(*args)
sc_constraint_get_id_by_name = _pm.sc_constraint_get_id_by_name

def sc_constraint_get_filter_id_by_name(*args):
  return _pm.sc_constraint_get_filter_id_by_name(*args)
sc_constraint_get_filter_id_by_name = _pm.sc_constraint_get_filter_id_by_name

def sc_constraint_get_function_id_by_name(*args):
  return _pm.sc_constraint_get_function_id_by_name(*args)
sc_constraint_get_function_id_by_name = _pm.sc_constraint_get_function_id_by_name

def sc_constraint_get_filter(*args):
  return _pm.sc_constraint_get_filter(*args)
sc_constraint_get_filter = _pm.sc_constraint_get_filter

def sc_constraint_get_filter_info(*args):
  return _pm.sc_constraint_get_filter_info(*args)
sc_constraint_get_filter_info = _pm.sc_constraint_get_filter_info

def sc_constraint_get_function(*args):
  return _pm.sc_constraint_get_function(*args)
sc_constraint_get_function = _pm.sc_constraint_get_function

def sc_constraint_get_function_info(*args):
  return _pm.sc_constraint_get_function_info(*args)
sc_constraint_get_function_info = _pm.sc_constraint_get_function_info

def sc_constraint_compile_set_constraint(*args):
  return _pm.sc_constraint_compile_set_constraint(*args)
sc_constraint_compile_set_constraint = _pm.sc_constraint_compile_set_constraint

def sc_constraint_register_set_constraint(*args):
  return _pm.sc_constraint_register_set_constraint(*args)
sc_constraint_register_set_constraint = _pm.sc_constraint_register_set_constraint

def sc_constraint_find_set_constraint(*args):
  return _pm.sc_constraint_find_set_constraint(*args)
sc_constraint_find_set_constraint = _pm.sc_constraint_find_set_constraint

def postinit_std_constraints(*args):
  return _pm.postinit_std_constraints(*args)
postinit_std_constraints = _pm.postinit_std_constraints

def init_std_constraints():
  return _pm.init_std_constraints()
init_std_constraints = _pm.init_std_constraints
SC_WAIT_DIE = _pm.SC_WAIT_DIE
SC_WAIT_DIE_PRE = _pm.SC_WAIT_DIE_PRE
SC_WAIT_ATTACH_INPUT = _pm.SC_WAIT_ATTACH_INPUT
SC_WAIT_ATTACH_OUTPUT = _pm.SC_WAIT_ATTACH_OUTPUT
SC_WAIT_CHANGE_TYPE = _pm.SC_WAIT_CHANGE_TYPE
SC_WAIT_DETACH_INPUT = _pm.SC_WAIT_DETACH_INPUT
SC_WAIT_DETACH_OUTPUT = _pm.SC_WAIT_DETACH_OUTPUT
SC_WAIT_ARC_BEG = _pm.SC_WAIT_ARC_BEG
SC_WAIT_ARC_END = _pm.SC_WAIT_ARC_END
SC_WAIT_ARCS_ENDS = _pm.SC_WAIT_ARCS_ENDS
SC_WAIT_CONT = _pm.SC_WAIT_CONT
SC_WAIT_IDTF = _pm.SC_WAIT_IDTF
SC_WAIT_HACK_SET_MEMBER = _pm.SC_WAIT_HACK_SET_MEMBER
SC_WAIT_HACK_IN_SET = _pm.SC_WAIT_HACK_IN_SET
SC_WAIT_MERGE = _pm.SC_WAIT_MERGE
SC_WAIT_PRE_FIRST = _pm.SC_WAIT_PRE_FIRST
SC_WAIT_DIE_PRE_REAL = _pm.SC_WAIT_DIE_PRE_REAL
SC_WAIT_ATTACH_INPUT_PRE = _pm.SC_WAIT_ATTACH_INPUT_PRE
SC_WAIT_ATTACH_OUTPUT_PRE = _pm.SC_WAIT_ATTACH_OUTPUT_PRE
SC_WAIT_CHANGE_TYPE_PRE = _pm.SC_WAIT_CHANGE_TYPE_PRE
SC_WAIT_DETACH_INPUT_PRE = _pm.SC_WAIT_DETACH_INPUT_PRE
SC_WAIT_DETACH_OUTPUT_PRE = _pm.SC_WAIT_DETACH_OUTPUT_PRE
SC_WAIT_HACK_SET_MEMBER_PRE = _pm.SC_WAIT_HACK_SET_MEMBER_PRE
SC_WAIT_HACK_IN_SET_PRE = _pm.SC_WAIT_HACK_IN_SET_PRE
SC_WAIT_COUNT = _pm.SC_WAIT_COUNT
SC_WAIT_SEGMENT_ON_ADD = _pm.SC_WAIT_SEGMENT_ON_ADD
SC_WAIT_SEGMENT_ON_REMOVE = _pm.SC_WAIT_SEGMENT_ON_REMOVE
class sc_wait_listhead(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_wait_listhead, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_wait_listhead, name)
    __repr__ = _swig_repr
    def get_next(self): return _pm.sc_wait_listhead_get_next(self)
    def get_prev(self): return _pm.sc_wait_listhead_get_prev(self)
    def append(self, *args): return _pm.sc_wait_listhead_append(self, *args)
    def prepend(self, *args): return _pm.sc_wait_listhead_prepend(self, *args)
    def remove(self): return _pm.sc_wait_listhead_remove(self)
    def __init__(self): 
        this = _pm.new_sc_wait_listhead()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_wait_listhead
    __del__ = lambda self : None;
sc_wait_listhead_swigregister = _pm.sc_wait_listhead_swigregister
sc_wait_listhead_swigregister(sc_wait_listhead)

class sc_wait_session_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_wait_session_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_wait_session_list, name)
    __repr__ = _swig_repr
    def get_next_session(self): return _pm.sc_wait_session_list_get_next_session(self)
    def get_prev_session(self): return _pm.sc_wait_session_list_get_prev_session(self)
    def remove_session(self): return _pm.sc_wait_session_list_remove_session(self)
    def append_session(self, *args): return _pm.sc_wait_session_list_append_session(self, *args)
    def prepend_session(self, *args): return _pm.sc_wait_session_list_prepend_session(self, *args)
    def __init__(self): 
        this = _pm.new_sc_wait_session_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_wait_session_list
    __del__ = lambda self : None;
sc_wait_session_list_swigregister = _pm.sc_wait_session_list_swigregister
sc_wait_session_list_swigregister(sc_wait_session_list)

class sc_wait(sc_wait_listhead,sc_wait_session_list):
    __swig_setmethods__ = {}
    for _s in [sc_wait_listhead,sc_wait_session_list]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_wait, name, value)
    __swig_getmethods__ = {}
    for _s in [sc_wait_listhead,sc_wait_session_list]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sc_wait, name)
    __repr__ = _swig_repr
    __swig_setmethods__["element"] = _pm.sc_wait_element_set
    __swig_getmethods__["element"] = _pm.sc_wait_element_get
    if _newclass:element = _swig_property(_pm.sc_wait_element_get, _pm.sc_wait_element_set)
    __swig_setmethods__["type"] = _pm.sc_wait_type_set
    __swig_getmethods__["type"] = _pm.sc_wait_type_get
    if _newclass:type = _swig_property(_pm.sc_wait_type_get, _pm.sc_wait_type_set)
    __swig_setmethods__["session"] = _pm.sc_wait_session_set
    __swig_getmethods__["session"] = _pm.sc_wait_session_get
    if _newclass:session = _swig_property(_pm.sc_wait_session_get, _pm.sc_wait_session_set)
    def __init__(self): 
        this = _pm.new_sc_wait()
        try: self.this.append(this)
        except: self.this = this
    def remove(self): return _pm.sc_wait_remove(self)
    __swig_destroy__ = _pm.delete_sc_wait
    __del__ = lambda self : None;
    def activate(self, *args): return _pm.sc_wait_activate(self, *args)
sc_wait_swigregister = _pm.sc_wait_swigregister
sc_wait_swigregister(sc_wait)


def check_prm_access(*args):
  return _pm.check_prm_access(*args)
check_prm_access = _pm.check_prm_access
class sc_waits_holder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_waits_holder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_waits_holder, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pm.new_sc_waits_holder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_waits_holder
    __del__ = lambda self : None;
    def add(self, *args): return _pm.sc_waits_holder_add(self, *args)
    def remove(self, *args): return _pm.sc_waits_holder_remove(self, *args)
    def is_empty(self, *args): return _pm.sc_waits_holder_is_empty(self, *args)
    def activate(self, *args): return _pm.sc_waits_holder_activate(self, *args)
    def clean(self): return _pm.sc_waits_holder_clean(self)
sc_waits_holder_swigregister = _pm.sc_waits_holder_swigregister
sc_waits_holder_swigregister(sc_waits_holder)

class sc_event_multi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_event_multi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_event_multi, name)
    __repr__ = _swig_repr
    def detach_all(self): return _pm.sc_event_multi_detach_all(self)
    def attach_to(self, *args): return _pm.sc_event_multi_attach_to(self, *args)
    __swig_destroy__ = _pm.delete_sc_event_multi
    __del__ = lambda self : None;
    def activate(self, *args): return _pm.sc_event_multi_activate(self, *args)
    def __init__(self): 
        if self.__class__ == sc_event_multi:
            _self = None
        else:
            _self = self
        this = _pm.new_sc_event_multi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _pm.disown_sc_event_multi(self)
        return weakref_proxy(self)
sc_event_multi_swigregister = _pm.sc_event_multi_swigregister
sc_event_multi_swigregister(sc_event_multi)


def get_el_by_full_uri(*args):
  return _pm.get_el_by_full_uri(*args)
get_el_by_full_uri = _pm.get_el_by_full_uri

def create_el_by_full_uri(*args):
  return _pm.create_el_by_full_uri(*args)
create_el_by_full_uri = _pm.create_el_by_full_uri

def is_system_id(*args):
  return _pm.is_system_id(*args)
is_system_id = _pm.is_system_id

def search_3l2_f_cpa_cna_cpa_f(*args):
  return _pm.search_3l2_f_cpa_cna_cpa_f(*args)
search_3l2_f_cpa_cna_cpa_f = _pm.search_3l2_f_cpa_cna_cpa_f

def search_5_f_cpa_a_cpa_f(*args):
  return _pm.search_5_f_cpa_a_cpa_f(*args)
search_5_f_cpa_a_cpa_f = _pm.search_5_f_cpa_a_cpa_f

def search_5_f_cpa_cna_cpa_f(*args):
  return _pm.search_5_f_cpa_cna_cpa_f(*args)
search_5_f_cpa_cna_cpa_f = _pm.search_5_f_cpa_cna_cpa_f

def search_3_f_cpa_f(*args):
  return _pm.search_3_f_cpa_f(*args)
search_3_f_cpa_f = _pm.search_3_f_cpa_f

def search_3_f_cpa_cna(*args):
  return _pm.search_3_f_cpa_cna(*args)
search_3_f_cpa_cna = _pm.search_3_f_cpa_cna

def search_3_f_cpa_a(*args):
  return _pm.search_3_f_cpa_a(*args)
search_3_f_cpa_a = _pm.search_3_f_cpa_a

def search_oneshot(*args):
  return _pm.search_oneshot(*args)
search_oneshot = _pm.search_oneshot

def search_oneshot_a(*args):
  return _pm.search_oneshot_a(*args)
search_oneshot_a = _pm.search_oneshot_a

def delete_oneshot(*args):
  return _pm.delete_oneshot(*args)
delete_oneshot = _pm.delete_oneshot

def dprintf(*args):
  return _pm.dprintf(*args)
dprintf = _pm.dprintf

def glue_identical(*args):
  return _pm.glue_identical(*args)
glue_identical = _pm.glue_identical
class glue_identical_checker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glue_identical_checker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glue_identical_checker, name)
    __repr__ = _swig_repr
    DIFFERENT_CONTENT = _pm.glue_identical_checker_DIFFERENT_CONTENT
    INCOMPATIBLE_TYPE = _pm.glue_identical_checker_INCOMPATIBLE_TYPE
    DIFFERENT_ARC_FROM = _pm.glue_identical_checker_DIFFERENT_ARC_FROM
    DIFFERENT_ARC_TO = _pm.glue_identical_checker_DIFFERENT_ARC_TO
    def __init__(self, *args): 
        this = _pm.new_glue_identical_checker(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self, *args): return _pm.glue_identical_checker_reset(self, *args)
    def get_session(self): return _pm.glue_identical_checker_get_session(self)
    def get_from(self): return _pm.glue_identical_checker_get_from(self)
    def get_to(self): return _pm.glue_identical_checker_get_to(self)
    __swig_destroy__ = _pm.delete_glue_identical_checker
    __del__ = lambda self : None;
    def error(self, *args): return _pm.glue_identical_checker_error(self, *args)
    def to_merge(self, *args): return _pm.glue_identical_checker_to_merge(self, *args)
    def stop_check(self): return _pm.glue_identical_checker_stop_check(self)
    def check(self): return _pm.glue_identical_checker_check(self)
glue_identical_checker_swigregister = _pm.glue_identical_checker_swigregister
glue_identical_checker_swigregister(glue_identical_checker)

def get_full_uri(*args):
  return _pm.get_full_uri(*args)
get_full_uri = _pm.get_full_uri


def glue_segment(*args):
  return _pm.glue_segment(*args)
glue_segment = _pm.glue_segment

def move_element_neighborhood(*args):
  return _pm.move_element_neighborhood(*args)
move_element_neighborhood = _pm.move_element_neighborhood

def sc_merge_elements(*args):
  return _pm.sc_merge_elements(*args)
sc_merge_elements = _pm.sc_merge_elements

def get_verb_output():
  return _pm.get_verb_output()
get_verb_output = _pm.get_verb_output

def set_verb_output(*args):
  return _pm.set_verb_output(*args)
set_verb_output = _pm.set_verb_output

def get_diag_output():
  return _pm.get_diag_output()
get_diag_output = _pm.get_diag_output

def set_diag_output(*args):
  return _pm.set_diag_output(*args)
set_diag_output = _pm.set_diag_output

def get_allow_unresolved_links():
  return _pm.get_allow_unresolved_links()
get_allow_unresolved_links = _pm.get_allow_unresolved_links

def set_allow_unresolved_links(*args):
  return _pm.set_allow_unresolved_links(*args)
set_allow_unresolved_links = _pm.set_allow_unresolved_links
SC_MAX_SEGMENTS = _pm.SC_MAX_SEGMENTS
class segments_exausted(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, segments_exausted, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, segments_exausted, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pm.new_segments_exausted()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_segments_exausted
    __del__ = lambda self : None;
segments_exausted_swigregister = _pm.segments_exausted_swigregister
segments_exausted_swigregister(segments_exausted)

def sc_is_mergeable(*args):
  return _pm.sc_is_mergeable(*args)
sc_is_mergeable = _pm.sc_is_mergeable

class segment_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, segment_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, segment_table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table"] = _pm.segment_table_table_set
    __swig_getmethods__["table"] = _pm.segment_table_table_get
    if _newclass:table = _swig_property(_pm.segment_table_table_get, _pm.segment_table_table_set)
    def __init__(self): 
        this = _pm.new_segment_table()
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _pm.segment_table_assign(self, *args)
    def release(self, *args): return _pm.segment_table_release(self, *args)
    __swig_destroy__ = _pm.delete_segment_table
    __del__ = lambda self : None;
segment_table_swigregister = _pm.segment_table_swigregister
segment_table_swigregister(segment_table)

class segment_set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, segment_set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, segment_set, name)
    __repr__ = _swig_repr
    bpe = _pm.segment_set_bpe
    __swig_setmethods__["data"] = _pm.segment_set_data_set
    __swig_getmethods__["data"] = _pm.segment_set_data_get
    if _newclass:data = _swig_property(_pm.segment_set_data_get, _pm.segment_set_data_set)
    def __init__(self): 
        this = _pm.new_segment_set()
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _pm.segment_set_set(self, *args)
    def reset(self, *args): return _pm.segment_set_reset(self, *args)
    def is_set(self, *args): return _pm.segment_set_is_set(self, *args)
    def __segnext(self, *args): return _pm.segment_set___segnext(self, *args)
    __swig_destroy__ = _pm.delete_segment_set
    __del__ = lambda self : None;
segment_set_swigregister = _pm.segment_set_swigregister
segment_set_swigregister(segment_set)

class lock_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lock_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lock_event, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pm.new_lock_event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_lock_event
    __del__ = lambda self : None;
lock_event_swigregister = _pm.lock_event_swigregister
lock_event_swigregister(lock_event)

class sc_addr_store(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_addr_store, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_addr_store, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seg"] = _pm.sc_addr_store_seg_set
    __swig_getmethods__["seg"] = _pm.sc_addr_store_seg_get
    if _newclass:seg = _swig_property(_pm.sc_addr_store_seg_get, _pm.sc_addr_store_seg_set)
    __swig_setmethods__["impl"] = _pm.sc_addr_store_impl_set
    __swig_getmethods__["impl"] = _pm.sc_addr_store_impl_get
    if _newclass:impl = _swig_property(_pm.sc_addr_store_impl_get, _pm.sc_addr_store_impl_set)
    def __init__(self, *args): 
        this = _pm.new_sc_addr_store(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_addr_store
    __del__ = lambda self : None;
sc_addr_store_swigregister = _pm.sc_addr_store_swigregister
sc_addr_store_swigregister(sc_addr_store)


def __sc_addr_erase_el(*args):
  return _pm.__sc_addr_erase_el(*args)
__sc_addr_erase_el = _pm.__sc_addr_erase_el
class sc_link_addr(sc_addr_store):
    __swig_setmethods__ = {}
    for _s in [sc_addr_store]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_link_addr, name, value)
    __swig_getmethods__ = {}
    for _s in [sc_addr_store]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sc_link_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _pm.sc_link_addr_next_set
    __swig_getmethods__["next"] = _pm.sc_link_addr_next_get
    if _newclass:next = _swig_property(_pm.sc_link_addr_next_get, _pm.sc_link_addr_next_set)
    __swig_setmethods__["prev"] = _pm.sc_link_addr_prev_set
    __swig_getmethods__["prev"] = _pm.sc_link_addr_prev_get
    if _newclass:prev = _swig_property(_pm.sc_link_addr_prev_get, _pm.sc_link_addr_prev_set)
    def __init__(self, *args): 
        this = _pm.new_sc_link_addr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_link_addr
    __del__ = lambda self : None;
sc_link_addr_swigregister = _pm.sc_link_addr_swigregister
sc_link_addr_swigregister(sc_link_addr)

class sc_addr_inv_handle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_addr_inv_handle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_addr_inv_handle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extra"] = _pm.sc_addr_inv_handle_extra_set
    __swig_getmethods__["extra"] = _pm.sc_addr_inv_handle_extra_get
    if _newclass:extra = _swig_property(_pm.sc_addr_inv_handle_extra_get, _pm.sc_addr_inv_handle_extra_set)
    __swig_setmethods__["next"] = _pm.sc_addr_inv_handle_next_set
    __swig_getmethods__["next"] = _pm.sc_addr_inv_handle_next_get
    if _newclass:next = _swig_property(_pm.sc_addr_inv_handle_next_get, _pm.sc_addr_inv_handle_next_set)
    __swig_setmethods__["handler"] = _pm.sc_addr_inv_handle_handler_set
    __swig_getmethods__["handler"] = _pm.sc_addr_inv_handle_handler_get
    if _newclass:handler = _swig_property(_pm.sc_addr_inv_handle_handler_get, _pm.sc_addr_inv_handle_handler_set)
    def __init__(self): 
        this = _pm.new_sc_addr_inv_handle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_addr_inv_handle
    __del__ = lambda self : None;
sc_addr_inv_handle_swigregister = _pm.sc_addr_inv_handle_swigregister
sc_addr_inv_handle_swigregister(sc_addr_inv_handle)

class sc_global_addr(sc_addr_store):
    __swig_setmethods__ = {}
    for _s in [sc_addr_store]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_global_addr, name, value)
    __swig_getmethods__ = {}
    for _s in [sc_addr_store]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sc_global_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["links"] = _pm.sc_global_addr_links_set
    __swig_getmethods__["links"] = _pm.sc_global_addr_links_get
    if _newclass:links = _swig_property(_pm.sc_global_addr_links_get, _pm.sc_global_addr_links_set)
    __swig_setmethods__["refcnt"] = _pm.sc_global_addr_refcnt_set
    __swig_getmethods__["refcnt"] = _pm.sc_global_addr_refcnt_get
    if _newclass:refcnt = _swig_property(_pm.sc_global_addr_refcnt_get, _pm.sc_global_addr_refcnt_set)
    __swig_setmethods__["dead"] = _pm.sc_global_addr_dead_set
    __swig_getmethods__["dead"] = _pm.sc_global_addr_dead_get
    if _newclass:dead = _swig_property(_pm.sc_global_addr_dead_get, _pm.sc_global_addr_dead_set)
    __swig_setmethods__["locked"] = _pm.sc_global_addr_locked_set
    __swig_getmethods__["locked"] = _pm.sc_global_addr_locked_get
    if _newclass:locked = _swig_property(_pm.sc_global_addr_locked_get, _pm.sc_global_addr_locked_set)
    __swig_setmethods__["zombie"] = _pm.sc_global_addr_zombie_set
    __swig_getmethods__["zombie"] = _pm.sc_global_addr_zombie_get
    if _newclass:zombie = _swig_property(_pm.sc_global_addr_zombie_get, _pm.sc_global_addr_zombie_set)
    __swig_setmethods__["activity"] = _pm.sc_global_addr_activity_set
    __swig_getmethods__["activity"] = _pm.sc_global_addr_activity_get
    if _newclass:activity = _swig_property(_pm.sc_global_addr_activity_get, _pm.sc_global_addr_activity_set)
    __swig_setmethods__["observers"] = _pm.sc_global_addr_observers_set
    __swig_getmethods__["observers"] = _pm.sc_global_addr_observers_get
    if _newclass:observers = _swig_property(_pm.sc_global_addr_observers_get, _pm.sc_global_addr_observers_set)
    __swig_setmethods__["waits"] = _pm.sc_global_addr_waits_set
    __swig_getmethods__["waits"] = _pm.sc_global_addr_waits_get
    if _newclass:waits = _swig_property(_pm.sc_global_addr_waits_get, _pm.sc_global_addr_waits_set)
    def __init__(self, *args): 
        this = _pm.new_sc_global_addr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_global_addr
    __del__ = lambda self : None;
    def ref(self): return _pm.sc_global_addr_ref(self)
    def unref(self): return _pm.sc_global_addr_unref(self)
    def is_dead(self): return _pm.sc_global_addr_is_dead(self)
    def die(self): return _pm.sc_global_addr_die(self)
    def activate(self, *args): return _pm.sc_global_addr_activate(self, *args)
    def get_waits(self): return _pm.sc_global_addr_get_waits(self)
    def add_observer(self, *args): return _pm.sc_global_addr_add_observer(self, *args)
    def remove_observer(self, *args): return _pm.sc_global_addr_remove_observer(self, *args)
    def __eq__(self, *args): return _pm.sc_global_addr___eq__(self, *args)
sc_global_addr_swigregister = _pm.sc_global_addr_swigregister
sc_global_addr_swigregister(sc_global_addr)


def insert_link(*args):
  return _pm.insert_link(*args)
insert_link = _pm.insert_link

def remove_link(*args):
  return _pm.remove_link(*args)
remove_link = _pm.remove_link

def insert_link_addr(*args):
  return _pm.insert_link_addr(*args)
insert_link_addr = _pm.insert_link_addr

def find_link(*args):
  return _pm.find_link(*args)
find_link = _pm.find_link

def pm_keynodes_item(*args):
  return _pm.pm_keynodes_item(*args)
pm_keynodes_item = _pm.pm_keynodes_item

def pm_numattr_item(*args):
  return _pm.pm_numattr_item(*args)
pm_numattr_item = _pm.pm_numattr_item

def pm_keynodes_init(*args):
  return _pm.pm_keynodes_init(*args)
pm_keynodes_init = _pm.pm_keynodes_init

def cdata_tgf(*args):
  return _pm.cdata_tgf(*args)
cdata_tgf = _pm.cdata_tgf
TGF_MAJOR_VER = _pm.TGF_MAJOR_VER
TGF_MINOR_VER = _pm.TGF_MINOR_VER
E_TGF_OK = _pm.E_TGF_OK
E_TGF_INVTYPE = _pm.E_TGF_INVTYPE
E_TGF_INVHDR = _pm.E_TGF_INVHDR
E_TGF_INVCRC = _pm.E_TGF_INVCRC
E_TGF_INVARGS = _pm.E_TGF_INVARGS
E_TGF_EOF = _pm.E_TGF_EOF
E_TGF_VER = _pm.E_TGF_VER
E_TGF_NOSPC = _pm.E_TGF_NOSPC
E_TGF_OPNOTSUPP = _pm.E_TGF_OPNOTSUPP
E_TGF_IO = _pm.E_TGF_IO
E_TGF_NOMEM = _pm.E_TGF_NOMEM
E_TGF_INVAL = _pm.E_TGF_INVAL
E_TGF_CLNT = _pm.E_TGF_CLNT
E_TGF_BUG = _pm.E_TGF_BUG
E_TGF_CMDFAIL = _pm.E_TGF_CMDFAIL
E_TGF_2BIG = _pm.E_TGF_2BIG
E_TGF_FEATURE = _pm.E_TGF_FEATURE
E_TGF_LAST = _pm.E_TGF_LAST

def tgf_error(*args):
  return _pm.tgf_error(*args)
tgf_error = _pm.tgf_error
TGF_CONSTANCY_MASK = _pm.TGF_CONSTANCY_MASK
TGF_CONSTANCY_SHIFT = _pm.TGF_CONSTANCY_SHIFT
TGF_CONST = _pm.TGF_CONST
TGF_VAR = _pm.TGF_VAR
TGF_METAVAR = _pm.TGF_METAVAR
TGF_FUZZYNESS_MASK = _pm.TGF_FUZZYNESS_MASK
TGF_FUZZYNESS_SHIFT = _pm.TGF_FUZZYNESS_SHIFT
TGF_POS = _pm.TGF_POS
TGF_NEG = _pm.TGF_NEG
TGF_FUZ = _pm.TGF_FUZ
TGF_ELMNCLASS_MASK = _pm.TGF_ELMNCLASS_MASK
TGF_ELMNCLASS_SHIFT = _pm.TGF_ELMNCLASS_SHIFT
TGF_ARC = _pm.TGF_ARC
TGF_NODE = _pm.TGF_NODE
TGF_UNDF = _pm.TGF_UNDF
TGF_INT32 = _pm.TGF_INT32
TGF_INT64 = _pm.TGF_INT64
TGF_FLOAT = _pm.TGF_FLOAT
TGF_DATA = _pm.TGF_DATA
TGF_SCTYPE = _pm.TGF_SCTYPE
TGF_INT16 = _pm.TGF_INT16
TGF_STRING = _pm.TGF_STRING
TGF_LAZY_DATA = _pm.TGF_LAZY_DATA
TGF_ARG_LAST = _pm.TGF_ARG_LAST
TGF_USERID = _pm.TGF_USERID
TGF_NONE = _pm.TGF_NONE
TGF_NOP = _pm.TGF_NOP
TGF_GENEL = _pm.TGF_GENEL
TGF_DECLARE_SEGMENT = _pm.TGF_DECLARE_SEGMENT
TGF_SWITCH_TO_SEGMENT = _pm.TGF_SWITCH_TO_SEGMENT
TGF_SETBEG = _pm.TGF_SETBEG
TGF_SETEND = _pm.TGF_SETEND
TGF_FINDBYIDTF = _pm.TGF_FINDBYIDTF
TGF_ENDOFSTREAM = _pm.TGF_ENDOFSTREAM
TGF_CMD_LAST = _pm.TGF_CMD_LAST
TGF_CHECKSUM_NONE = _pm.TGF_CHECKSUM_NONE
TGF_CHECKSUM_XOR = _pm.TGF_CHECKSUM_XOR
TGF_COMPRESSION_NONE = _pm.TGF_COMPRESSION_NONE
TGF_COMPRESSION_Z = _pm.TGF_COMPRESSION_Z
class _tgf_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _tgf_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _tgf_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["signature"] = _pm._tgf_header_signature_set
    __swig_getmethods__["signature"] = _pm._tgf_header_signature_get
    if _newclass:signature = _swig_property(_pm._tgf_header_signature_get, _pm._tgf_header_signature_set)
    __swig_setmethods__["minor_ver"] = _pm._tgf_header_minor_ver_set
    __swig_getmethods__["minor_ver"] = _pm._tgf_header_minor_ver_get
    if _newclass:minor_ver = _swig_property(_pm._tgf_header_minor_ver_get, _pm._tgf_header_minor_ver_set)
    __swig_setmethods__["major_ver"] = _pm._tgf_header_major_ver_set
    __swig_getmethods__["major_ver"] = _pm._tgf_header_major_ver_get
    if _newclass:major_ver = _swig_property(_pm._tgf_header_major_ver_get, _pm._tgf_header_major_ver_set)
    __swig_setmethods__["endianness"] = _pm._tgf_header_endianness_set
    __swig_getmethods__["endianness"] = _pm._tgf_header_endianness_get
    if _newclass:endianness = _swig_property(_pm._tgf_header_endianness_get, _pm._tgf_header_endianness_set)
    __swig_setmethods__["compression"] = _pm._tgf_header_compression_set
    __swig_getmethods__["compression"] = _pm._tgf_header_compression_get
    if _newclass:compression = _swig_property(_pm._tgf_header_compression_get, _pm._tgf_header_compression_set)
    __swig_setmethods__["res1"] = _pm._tgf_header_res1_set
    __swig_getmethods__["res1"] = _pm._tgf_header_res1_get
    if _newclass:res1 = _swig_property(_pm._tgf_header_res1_get, _pm._tgf_header_res1_set)
    __swig_setmethods__["checksum"] = _pm._tgf_header_checksum_set
    __swig_getmethods__["checksum"] = _pm._tgf_header_checksum_get
    if _newclass:checksum = _swig_property(_pm._tgf_header_checksum_get, _pm._tgf_header_checksum_set)
    __swig_setmethods__["_res2"] = _pm._tgf_header__res2_set
    __swig_getmethods__["_res2"] = _pm._tgf_header__res2_get
    if _newclass:_res2 = _swig_property(_pm._tgf_header__res2_get, _pm._tgf_header__res2_set)
    __swig_setmethods__["id_size"] = _pm._tgf_header_id_size_set
    __swig_getmethods__["id_size"] = _pm._tgf_header_id_size_get
    if _newclass:id_size = _swig_property(_pm._tgf_header_id_size_get, _pm._tgf_header_id_size_set)
    def __init__(self): 
        this = _pm.new__tgf_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete__tgf_header
    __del__ = lambda self : None;
_tgf_header_swigregister = _pm._tgf_header_swigregister
_tgf_header_swigregister(_tgf_header)

TGF_HEADER_SIZE = _pm.TGF_HEADER_SIZE
class _tgf_header_user(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _tgf_header_user, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _tgf_header_user, name)
    __repr__ = _swig_repr
    __swig_setmethods__["signature"] = _pm._tgf_header_user_signature_set
    __swig_getmethods__["signature"] = _pm._tgf_header_user_signature_get
    if _newclass:signature = _swig_property(_pm._tgf_header_user_signature_get, _pm._tgf_header_user_signature_set)
    __swig_setmethods__["minor_ver"] = _pm._tgf_header_user_minor_ver_set
    __swig_getmethods__["minor_ver"] = _pm._tgf_header_user_minor_ver_get
    if _newclass:minor_ver = _swig_property(_pm._tgf_header_user_minor_ver_get, _pm._tgf_header_user_minor_ver_set)
    __swig_setmethods__["major_ver"] = _pm._tgf_header_user_major_ver_set
    __swig_getmethods__["major_ver"] = _pm._tgf_header_user_major_ver_get
    if _newclass:major_ver = _swig_property(_pm._tgf_header_user_major_ver_get, _pm._tgf_header_user_major_ver_set)
    __swig_setmethods__["endianness"] = _pm._tgf_header_user_endianness_set
    __swig_getmethods__["endianness"] = _pm._tgf_header_user_endianness_get
    if _newclass:endianness = _swig_property(_pm._tgf_header_user_endianness_get, _pm._tgf_header_user_endianness_set)
    __swig_setmethods__["compression"] = _pm._tgf_header_user_compression_set
    __swig_getmethods__["compression"] = _pm._tgf_header_user_compression_get
    if _newclass:compression = _swig_property(_pm._tgf_header_user_compression_get, _pm._tgf_header_user_compression_set)
    __swig_setmethods__["_res1"] = _pm._tgf_header_user__res1_set
    __swig_getmethods__["_res1"] = _pm._tgf_header_user__res1_get
    if _newclass:_res1 = _swig_property(_pm._tgf_header_user__res1_get, _pm._tgf_header_user__res1_set)
    __swig_setmethods__["checksum"] = _pm._tgf_header_user_checksum_set
    __swig_getmethods__["checksum"] = _pm._tgf_header_user_checksum_get
    if _newclass:checksum = _swig_property(_pm._tgf_header_user_checksum_get, _pm._tgf_header_user_checksum_set)
    __swig_setmethods__["_res2"] = _pm._tgf_header_user__res2_set
    __swig_getmethods__["_res2"] = _pm._tgf_header_user__res2_get
    if _newclass:_res2 = _swig_property(_pm._tgf_header_user__res2_get, _pm._tgf_header_user__res2_set)
    __swig_setmethods__["id_size"] = _pm._tgf_header_user_id_size_set
    __swig_getmethods__["id_size"] = _pm._tgf_header_user_id_size_get
    if _newclass:id_size = _swig_property(_pm._tgf_header_user_id_size_get, _pm._tgf_header_user_id_size_set)
    __swig_setmethods__["tgf_id"] = _pm._tgf_header_user_tgf_id_set
    __swig_getmethods__["tgf_id"] = _pm._tgf_header_user_tgf_id_get
    if _newclass:tgf_id = _swig_property(_pm._tgf_header_user_tgf_id_get, _pm._tgf_header_user_tgf_id_set)
    def __init__(self): 
        this = _pm.new__tgf_header_user()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete__tgf_header_user
    __del__ = lambda self : None;
_tgf_header_user_swigregister = _pm._tgf_header_user_swigregister
_tgf_header_user_swigregister(_tgf_header_user)

class _tgf_command_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _tgf_command_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _tgf_command_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmd_type"] = _pm._tgf_command_header_cmd_type_set
    __swig_getmethods__["cmd_type"] = _pm._tgf_command_header_cmd_type_get
    if _newclass:cmd_type = _swig_property(_pm._tgf_command_header_cmd_type_get, _pm._tgf_command_header_cmd_type_set)
    __swig_setmethods__["arg_cnt"] = _pm._tgf_command_header_arg_cnt_set
    __swig_getmethods__["arg_cnt"] = _pm._tgf_command_header_arg_cnt_get
    if _newclass:arg_cnt = _swig_property(_pm._tgf_command_header_arg_cnt_get, _pm._tgf_command_header_arg_cnt_set)
    def __init__(self): 
        this = _pm.new__tgf_command_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete__tgf_command_header
    __del__ = lambda self : None;
_tgf_command_header_swigregister = _pm._tgf_command_header_swigregister
_tgf_command_header_swigregister(_tgf_command_header)

class _tgf_argument_user(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _tgf_argument_user, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _tgf_argument_user, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pm._tgf_argument_user_type_set
    __swig_getmethods__["type"] = _pm._tgf_argument_user_type_get
    if _newclass:type = _swig_property(_pm._tgf_argument_user_type_get, _pm._tgf_argument_user_type_set)
    __swig_setmethods__["data_len"] = _pm._tgf_argument_user_data_len_set
    __swig_getmethods__["data_len"] = _pm._tgf_argument_user_data_len_get
    if _newclass:data_len = _swig_property(_pm._tgf_argument_user_data_len_get, _pm._tgf_argument_user_data_len_set)
    def __init__(self): 
        this = _pm.new__tgf_argument_user()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete__tgf_argument_user
    __del__ = lambda self : None;
_tgf_argument_user_swigregister = _pm._tgf_argument_user_swigregister
_tgf_argument_user_swigregister(_tgf_argument_user)

class _tgf_command_user(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _tgf_command_user, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _tgf_command_user, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pm._tgf_command_user_type_set
    __swig_getmethods__["type"] = _pm._tgf_command_user_type_get
    if _newclass:type = _swig_property(_pm._tgf_command_user_type_get, _pm._tgf_command_user_type_set)
    __swig_setmethods__["arg_cnt"] = _pm._tgf_command_user_arg_cnt_set
    __swig_getmethods__["arg_cnt"] = _pm._tgf_command_user_arg_cnt_get
    if _newclass:arg_cnt = _swig_property(_pm._tgf_command_user_arg_cnt_get, _pm._tgf_command_user_arg_cnt_set)
    __swig_setmethods__["arguments"] = _pm._tgf_command_user_arguments_set
    __swig_getmethods__["arguments"] = _pm._tgf_command_user_arguments_get
    if _newclass:arguments = _swig_property(_pm._tgf_command_user_arguments_get, _pm._tgf_command_user_arguments_set)
    def __init__(self): 
        this = _pm.new__tgf_command_user()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete__tgf_command_user
    __del__ = lambda self : None;
_tgf_command_user_swigregister = _pm._tgf_command_user_swigregister
_tgf_command_user_swigregister(_tgf_command_user)


def tgf_stream_in_new():
  return _pm.tgf_stream_in_new()
tgf_stream_in_new = _pm.tgf_stream_in_new

def tgf_stream_in_destroy(*args):
  return _pm.tgf_stream_in_destroy(*args)
tgf_stream_in_destroy = _pm.tgf_stream_in_destroy

def tgf_stream_in_buf(*args):
  return _pm.tgf_stream_in_buf(*args)
tgf_stream_in_buf = _pm.tgf_stream_in_buf

def tgf_stream_in_fd(*args):
  return _pm.tgf_stream_in_fd(*args)
tgf_stream_in_fd = _pm.tgf_stream_in_fd

def tgf_stream_in_custom(*args):
  return _pm.tgf_stream_in_custom(*args)
tgf_stream_in_custom = _pm.tgf_stream_in_custom

def tgf_stream_in_get_error(*args):
  return _pm.tgf_stream_in_get_error(*args)
tgf_stream_in_get_error = _pm.tgf_stream_in_get_error

def tgf_stream_in_start(*args):
  return _pm.tgf_stream_in_start(*args)
tgf_stream_in_start = _pm.tgf_stream_in_start

def tgf_read_command(*args):
  return _pm.tgf_read_command(*args)
tgf_read_command = _pm.tgf_read_command

def tgf_stream_in_process_command(*args):
  return _pm.tgf_stream_in_process_command(*args)
tgf_stream_in_process_command = _pm.tgf_stream_in_process_command

def tgf_stream_in_process_all(*args):
  return _pm.tgf_stream_in_process_all(*args)
tgf_stream_in_process_all = _pm.tgf_stream_in_process_all

def tgf_stream_out_new():
  return _pm.tgf_stream_out_new()
tgf_stream_out_new = _pm.tgf_stream_out_new

def tgf_stream_out_destroy(*args):
  return _pm.tgf_stream_out_destroy(*args)
tgf_stream_out_destroy = _pm.tgf_stream_out_destroy

def tgf_stream_out_buf(*args):
  return _pm.tgf_stream_out_buf(*args)
tgf_stream_out_buf = _pm.tgf_stream_out_buf

def tgf_stream_out_fd(*args):
  return _pm.tgf_stream_out_fd(*args)
tgf_stream_out_fd = _pm.tgf_stream_out_fd

def tgf_stream_out_custom(*args):
  return _pm.tgf_stream_out_custom(*args)
tgf_stream_out_custom = _pm.tgf_stream_out_custom

def tgf_stream_out_get_error(*args):
  return _pm.tgf_stream_out_get_error(*args)
tgf_stream_out_get_error = _pm.tgf_stream_out_get_error

def tgf_stream_out_set_compression(*args):
  return _pm.tgf_stream_out_set_compression(*args)
tgf_stream_out_set_compression = _pm.tgf_stream_out_set_compression

def tgf_stream_out_start(*args):
  return _pm.tgf_stream_out_start(*args)
tgf_stream_out_start = _pm.tgf_stream_out_start

def tgf_stream_out_finish(*args):
  return _pm.tgf_stream_out_finish(*args)
tgf_stream_out_finish = _pm.tgf_stream_out_finish

def tgf_write_translated_command(*args):
  return _pm.tgf_write_translated_command(*args)
tgf_write_translated_command = _pm.tgf_write_translated_command

def tgf_write_command(*args):
  return _pm.tgf_write_command(*args)
tgf_write_command = _pm.tgf_write_command

def tgf_stream_out_is_written(*args):
  return _pm.tgf_stream_out_is_written(*args)
tgf_stream_out_is_written = _pm.tgf_stream_out_is_written

def free_tgf_dump(*args):
  return _pm.free_tgf_dump(*args)
free_tgf_dump = _pm.free_tgf_dump

def pm_read_tgf_to(*args):
  return _pm.pm_read_tgf_to(*args)
pm_read_tgf_to = _pm.pm_read_tgf_to

def pm_read_tgf_to_full(*args):
  return _pm.pm_read_tgf_to_full(*args)
pm_read_tgf_to_full = _pm.pm_read_tgf_to_full

def pm_write_dirhier(*args):
  return _pm.pm_write_dirhier(*args)
pm_write_dirhier = _pm.pm_write_dirhier
class pm_writer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pm_writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pm_writer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pm.new_pm_writer(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_lazy_limit(self): return _pm.pm_writer_get_lazy_limit(self)
    def set_lazy_limit(self, *args): return _pm.pm_writer_set_lazy_limit(self, *args)
    def write(self, *args): return _pm.pm_writer_write(self, *args)
    def arc_sync(self): return _pm.pm_writer_arc_sync(self)
    __swig_destroy__ = _pm.delete_pm_writer
    __del__ = lambda self : None;
pm_writer_swigregister = _pm.pm_writer_swigregister
pm_writer_swigregister(pm_writer)

class tgf_dump(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgf_dump, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgf_dump, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _pm.tgf_dump_size_set
    __swig_getmethods__["size"] = _pm.tgf_dump_size_get
    if _newclass:size = _swig_property(_pm.tgf_dump_size_get, _pm.tgf_dump_size_set)
    __swig_setmethods__["data"] = _pm.tgf_dump_data_set
    __swig_getmethods__["data"] = _pm.tgf_dump_data_get
    if _newclass:data = _swig_property(_pm.tgf_dump_data_get, _pm.tgf_dump_data_set)
    __swig_setmethods__["stream"] = _pm.tgf_dump_stream_set
    __swig_getmethods__["stream"] = _pm.tgf_dump_stream_get
    if _newclass:stream = _swig_property(_pm.tgf_dump_stream_get, _pm.tgf_dump_stream_set)
    def __init__(self): 
        this = _pm.new_tgf_dump()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_tgf_dump
    __del__ = lambda self : None;
tgf_dump_swigregister = _pm.tgf_dump_swigregister
tgf_dump_swigregister(tgf_dump)


def tgf2mem_dumper_new():
  return _pm.tgf2mem_dumper_new()
tgf2mem_dumper_new = _pm.tgf2mem_dumper_new

def tgf2mem_dumper_delete(*args):
  return _pm.tgf2mem_dumper_delete(*args)
tgf2mem_dumper_delete = _pm.tgf2mem_dumper_delete
class sc_generator_proxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_generator_proxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_generator_proxy, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pm.delete_sc_generator_proxy
    __del__ = lambda self : None;
    def get_session(self): return _pm.sc_generator_proxy_get_session(self)
    def create_el(self, *args): return _pm.sc_generator_proxy_create_el(self, *args)
    def erase_el(self, *args): return _pm.sc_generator_proxy_erase_el(self, *args)
    def set_beg(self, *args): return _pm.sc_generator_proxy_set_beg(self, *args)
    def set_end(self, *args): return _pm.sc_generator_proxy_set_end(self, *args)
    def set_idtf(self, *args): return _pm.sc_generator_proxy_set_idtf(self, *args)
    def set_content(self, *args): return _pm.sc_generator_proxy_set_content(self, *args)
    def change_type(self, *args): return _pm.sc_generator_proxy_change_type(self, *args)
sc_generator_proxy_swigregister = _pm.sc_generator_proxy_swigregister
sc_generator_proxy_swigregister(sc_generator_proxy)

class sc_generator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_generator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_generator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arc_type"] = _pm.sc_generator_arc_type_set
    __swig_getmethods__["arc_type"] = _pm.sc_generator_arc_type_get
    if _newclass:arc_type = _swig_property(_pm.sc_generator_arc_type_get, _pm.sc_generator_arc_type_set)
    __swig_setmethods__["element_type"] = _pm.sc_generator_element_type_set
    __swig_getmethods__["element_type"] = _pm.sc_generator_element_type_get
    if _newclass:element_type = _swig_property(_pm.sc_generator_element_type_get, _pm.sc_generator_element_type_set)
    __swig_setmethods__["set_arc_type"] = _pm.sc_generator_set_arc_type_set
    __swig_getmethods__["set_arc_type"] = _pm.sc_generator_set_arc_type_get
    if _newclass:set_arc_type = _swig_property(_pm.sc_generator_set_arc_type_get, _pm.sc_generator_set_arc_type_set)
    __swig_setmethods__["system_arc_type"] = _pm.sc_generator_system_arc_type_set
    __swig_getmethods__["system_arc_type"] = _pm.sc_generator_system_arc_type_get
    if _newclass:system_arc_type = _swig_property(_pm.sc_generator_system_arc_type_get, _pm.sc_generator_system_arc_type_set)
    __swig_setmethods__["attr_arc_type"] = _pm.sc_generator_attr_arc_type_set
    __swig_getmethods__["attr_arc_type"] = _pm.sc_generator_attr_arc_type_get
    if _newclass:attr_arc_type = _swig_property(_pm.sc_generator_attr_arc_type_get, _pm.sc_generator_attr_arc_type_set)
    def __init__(self, *args): 
        this = _pm.new_sc_generator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_generator
    __del__ = lambda self : None;
    def get_session(self): return _pm.sc_generator_get_session(self)
    def set_active_segment(self, *args): return _pm.sc_generator_set_active_segment(self, *args)
    def set_content(self, *args): return _pm.sc_generator_set_content(self, *args)
    def set_idtf(self, *args): return _pm.sc_generator_set_idtf(self, *args)
    def change_type(self, *args): return _pm.sc_generator_change_type(self, *args)
    def get_active_segment(self): return _pm.sc_generator_get_active_segment(self)
    def enter_set(self, *args): return _pm.sc_generator_enter_set(self, *args)
    def leave_set(self): return _pm.sc_generator_leave_set(self)
    def enter_system(self, *args): return _pm.sc_generator_enter_system(self, *args)
    def leave_system(self): return _pm.sc_generator_leave_system(self)
    def attr(self, *args): return _pm.sc_generator_attr(self, *args)
    def __lshift__(self, *args): return _pm.sc_generator___lshift__(self, *args)
    def element(self, *args): return _pm.sc_generator_element(self, *args)
    def finish(self): return _pm.sc_generator_finish(self)
    def arc(self): return _pm.sc_generator_arc(self)
    def gen_arc(self, *args): return _pm.sc_generator_gen_arc(self, *args)
    def leave_all(self): return _pm.sc_generator_leave_all(self)
sc_generator_swigregister = _pm.sc_generator_swigregister
sc_generator_swigregister(sc_generator)


def ADDR_AS_PAR(*args):
  return _pm.ADDR_AS_PAR(*args)
ADDR_AS_PAR = _pm.ADDR_AS_PAR

def set_uid_generator(*args):
  return _pm.set_uid_generator(*args)
set_uid_generator = _pm.set_uid_generator

def generate_uid():
  return _pm.generate_uid()
generate_uid = _pm.generate_uid
class sc_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_list, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _pm.sc_list_create
    if _newclass:create = staticmethod(_pm.sc_list_create)
    __swig_getmethods__["erase"] = lambda x: _pm.sc_list_erase
    if _newclass:erase = staticmethod(_pm.sc_list_erase)
    __swig_getmethods__["set_next"] = lambda x: _pm.sc_list_set_next
    if _newclass:set_next = staticmethod(_pm.sc_list_set_next)
    __swig_getmethods__["set_value"] = lambda x: _pm.sc_list_set_value
    if _newclass:set_value = staticmethod(_pm.sc_list_set_value)
    __swig_getmethods__["get_next"] = lambda x: _pm.sc_list_get_next
    if _newclass:get_next = staticmethod(_pm.sc_list_get_next)
    __swig_getmethods__["get_prev"] = lambda x: _pm.sc_list_get_prev
    if _newclass:get_prev = staticmethod(_pm.sc_list_get_prev)
    __swig_getmethods__["get_value"] = lambda x: _pm.sc_list_get_value
    if _newclass:get_value = staticmethod(_pm.sc_list_get_value)
    def __init__(self): 
        this = _pm.new_sc_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_list
    __del__ = lambda self : None;
sc_list_swigregister = _pm.sc_list_swigregister
sc_list_swigregister(sc_list)

def sc_list_create(*args):
  return _pm.sc_list_create(*args)
sc_list_create = _pm.sc_list_create

def sc_list_erase(*args):
  return _pm.sc_list_erase(*args)
sc_list_erase = _pm.sc_list_erase

def sc_list_set_next(*args):
  return _pm.sc_list_set_next(*args)
sc_list_set_next = _pm.sc_list_set_next

def sc_list_set_value(*args):
  return _pm.sc_list_set_value(*args)
sc_list_set_value = _pm.sc_list_set_value

def sc_list_get_next(*args):
  return _pm.sc_list_get_next(*args)
sc_list_get_next = _pm.sc_list_get_next

def sc_list_get_prev(*args):
  return _pm.sc_list_get_prev(*args)
sc_list_get_prev = _pm.sc_list_get_prev

def sc_list_get_value(*args):
  return _pm.sc_list_get_value(*args)
sc_list_get_value = _pm.sc_list_get_value

SC_ATOMS_SEGNAME = _pm.SC_ATOMS_SEGNAME

def sc_atoms_init():
  return _pm.sc_atoms_init()
sc_atoms_init = _pm.sc_atoms_init

def sc_atom_intern(*args):
  return _pm.sc_atom_intern(*args)
sc_atom_intern = _pm.sc_atom_intern

def sc_atom_intern_special(*args):
  return _pm.sc_atom_intern_special(*args)
sc_atom_intern_special = _pm.sc_atom_intern_special
class sc_atom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sc_atom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sc_atom, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pm.sc_atom_name_set
    __swig_getmethods__["name"] = _pm.sc_atom_name_get
    if _newclass:name = _swig_property(_pm.sc_atom_name_get, _pm.sc_atom_name_set)
    __swig_setmethods__["value"] = _pm.sc_atom_value_set
    __swig_getmethods__["value"] = _pm.sc_atom_value_get
    if _newclass:value = _swig_property(_pm.sc_atom_value_get, _pm.sc_atom_value_set)
    __swig_setmethods__["next"] = _pm.sc_atom_next_set
    __swig_getmethods__["next"] = _pm.sc_atom_next_get
    if _newclass:next = _swig_property(_pm.sc_atom_next_get, _pm.sc_atom_next_set)
    def __init__(self, *args): 
        this = _pm.new_sc_atom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sc_atom
    __del__ = lambda self : None;
sc_atom_swigregister = _pm.sc_atom_swigregister
sc_atom_swigregister(sc_atom)


def do_read_tgf(*args):
  return _pm.do_read_tgf(*args)
do_read_tgf = _pm.do_read_tgf

def do_deinit():
  return _pm.do_deinit()
do_deinit = _pm.do_deinit

def get_session():
  return _pm.get_session()
get_session = _pm.get_session

def do_step():
  return _pm.do_step()
do_step = _pm.do_step

def pm_startup():
  return _pm.pm_startup()
pm_startup = _pm.pm_startup

def pm_sched_init(*args):
  return _pm.pm_sched_init(*args)
pm_sched_init = _pm.pm_sched_init

def pm_sched_get_sched_class(*args):
  return _pm.pm_sched_get_sched_class(*args)
pm_sched_get_sched_class = _pm.pm_sched_get_sched_class

def pm_sched_add_agent(*args):
  return _pm.pm_sched_add_agent(*args)
pm_sched_add_agent = _pm.pm_sched_add_agent

def pm_sched_remove_agent(*args):
  return _pm.pm_sched_remove_agent(*args)
pm_sched_remove_agent = _pm.pm_sched_remove_agent

def pm_sched_put_to_sleep(*args):
  return _pm.pm_sched_put_to_sleep(*args)
pm_sched_put_to_sleep = _pm.pm_sched_put_to_sleep

def pm_sched_put_to_sleep_and_switch(*args):
  return _pm.pm_sched_put_to_sleep_and_switch(*args)
pm_sched_put_to_sleep_and_switch = _pm.pm_sched_put_to_sleep_and_switch

def pm_sched_is_sleeping(*args):
  return _pm.pm_sched_is_sleeping(*args)
pm_sched_is_sleeping = _pm.pm_sched_is_sleeping

def pm_sched_wakeup(*args):
  return _pm.pm_sched_wakeup(*args)
pm_sched_wakeup = _pm.pm_sched_wakeup

def pm_sched_set_wakeup_hook(*args):
  return _pm.pm_sched_set_wakeup_hook(*args)
pm_sched_set_wakeup_hook = _pm.pm_sched_set_wakeup_hook

def pm_sched_remove_wakeup_hook(*args):
  return _pm.pm_sched_remove_wakeup_hook(*args)
pm_sched_remove_wakeup_hook = _pm.pm_sched_remove_wakeup_hook

def pm_sched_main():
  return _pm.pm_sched_main()
pm_sched_main = _pm.pm_sched_main

def pm_sched_do_step():
  return _pm.pm_sched_do_step()
pm_sched_do_step = _pm.pm_sched_do_step

def pm_sched_quit():
  return _pm.pm_sched_quit()
pm_sched_quit = _pm.pm_sched_quit

def pm_sched_get_current():
  return _pm.pm_sched_get_current()
pm_sched_get_current = _pm.pm_sched_get_current
class sleep_until_event_wait(sc_wait):
    __swig_setmethods__ = {}
    for _s in [sc_wait]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sleep_until_event_wait, name, value)
    __swig_getmethods__ = {}
    for _s in [sc_wait]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sleep_until_event_wait, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pm.new_sleep_until_event_wait(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_sleep_until_event_wait
    __del__ = lambda self : None;
    def activate(self, *args): return _pm.sleep_until_event_wait_activate(self, *args)
sleep_until_event_wait_swigregister = _pm.sleep_until_event_wait_swigregister
sleep_until_event_wait_swigregister(sleep_until_event_wait)
KEYNODE_SEGURI = cvar.KEYNODE_SEGURI

def do_init(*args):
  return _pm.do_init(*args)
do_init = _pm.do_init

def do_dedicated(shed = True, detach = False):
  return _pm.do_dedicated(shed, detach)
do_dedicated = _pm.do_dedicated


def init_sc_operations(*args):
  return _pm.init_sc_operations(*args)
init_sc_operations = _pm.init_sc_operations
class ScOperation(sc_event_multi):
    __swig_setmethods__ = {}
    for _s in [sc_event_multi]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [sc_event_multi]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScOperation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ScOperation:
            _self = None
        else:
            _self = self
        this = _pm.new_ScOperation(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _pm.ScOperation_getName(self)
    def getActCond(self): return _pm.ScOperation_getActCond(self)
    def getActCondParams(self): return _pm.ScOperation_getActCondParams(self)
    def registerOperation(self): return _pm.ScOperation_registerOperation(self)
    def activate(self, *args): return _pm.ScOperation_activate(self, *args)
    def genActCond(self, *args): return _pm.ScOperation_genActCond(self, *args)
    def activateImpl(self, *args): return _pm.ScOperation_activateImpl(self, *args)
    __swig_destroy__ = _pm.delete_ScOperation
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pm.disown_ScOperation(self)
        return weakref_proxy(self)
ScOperation_swigregister = _pm.ScOperation_swigregister
ScOperation_swigregister(ScOperation)
OPERATIONS_SEGURI = cvar.OPERATIONS_SEGURI

class ScOperationActSetMember(ScOperation):
    __swig_setmethods__ = {}
    for _s in [ScOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScOperationActSetMember, name, value)
    __swig_getmethods__ = {}
    for _s in [ScOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScOperationActSetMember, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ScOperationActSetMember:
            _self = None
        else:
            _self = self
        this = _pm.new_ScOperationActSetMember(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def genActCond(self, *args): return _pm.ScOperationActSetMember_genActCond(self, *args)
    __swig_destroy__ = _pm.delete_ScOperationActSetMember
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pm.disown_ScOperationActSetMember(self)
        return weakref_proxy(self)
    def activateImpl(self, *args): return _pm.ScOperationActSetMember_activateImpl(self, *args)
ScOperationActSetMember_swigregister = _pm.ScOperationActSetMember_swigregister
ScOperationActSetMember_swigregister(ScOperationActSetMember)

class ScOperationActInSet(ScOperation):
    __swig_setmethods__ = {}
    for _s in [ScOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScOperationActInSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ScOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScOperationActInSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ScOperationActInSet:
            _self = None
        else:
            _self = self
        this = _pm.new_ScOperationActInSet(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def genActCond(self, *args): return _pm.ScOperationActInSet_genActCond(self, *args)
    __swig_destroy__ = _pm.delete_ScOperationActInSet
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pm.disown_ScOperationActInSet(self)
        return weakref_proxy(self)
    def activateImpl(self, *args): return _pm.ScOperationActInSet_activateImpl(self, *args)
ScOperationActInSet_swigregister = _pm.ScOperationActInSet_swigregister
ScOperationActInSet_swigregister(ScOperationActInSet)

class ScOperationElChange(ScOperation):
    __swig_setmethods__ = {}
    for _s in [ScOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScOperationElChange, name, value)
    __swig_getmethods__ = {}
    for _s in [ScOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScOperationElChange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ScOperationElChange:
            _self = None
        else:
            _self = self
        this = _pm.new_ScOperationElChange(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def genActCond(self, *args): return _pm.ScOperationElChange_genActCond(self, *args)
    __swig_destroy__ = _pm.delete_ScOperationElChange
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pm.disown_ScOperationElChange(self)
        return weakref_proxy(self)
    def activateImpl(self, *args): return _pm.ScOperationElChange_activateImpl(self, *args)
ScOperationElChange_swigregister = _pm.ScOperationElChange_swigregister
ScOperationElChange_swigregister(ScOperationElChange)

class ScOperationCont(ScOperationElChange):
    __swig_setmethods__ = {}
    for _s in [ScOperationElChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScOperationCont, name, value)
    __swig_getmethods__ = {}
    for _s in [ScOperationElChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScOperationCont, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ScOperationCont:
            _self = None
        else:
            _self = self
        this = _pm.new_ScOperationCont(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_ScOperationCont
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pm.disown_ScOperationCont(self)
        return weakref_proxy(self)
    def genActCond(self, *args): return _pm.ScOperationCont_genActCond(self, *args)
    def activateImpl(self, *args): return _pm.ScOperationCont_activateImpl(self, *args)
ScOperationCont_swigregister = _pm.ScOperationCont_swigregister
ScOperationCont_swigregister(ScOperationCont)

class ScOperationIdtf(ScOperationElChange):
    __swig_setmethods__ = {}
    for _s in [ScOperationElChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScOperationIdtf, name, value)
    __swig_getmethods__ = {}
    for _s in [ScOperationElChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScOperationIdtf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ScOperationIdtf:
            _self = None
        else:
            _self = self
        this = _pm.new_ScOperationIdtf(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_ScOperationIdtf
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pm.disown_ScOperationIdtf(self)
        return weakref_proxy(self)
    def genActCond(self, *args): return _pm.ScOperationIdtf_genActCond(self, *args)
    def activateImpl(self, *args): return _pm.ScOperationIdtf_activateImpl(self, *args)
ScOperationIdtf_swigregister = _pm.ScOperationIdtf_swigregister
ScOperationIdtf_swigregister(ScOperationIdtf)

class ScOperationDie(ScOperationElChange):
    __swig_setmethods__ = {}
    for _s in [ScOperationElChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScOperationDie, name, value)
    __swig_getmethods__ = {}
    for _s in [ScOperationElChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScOperationDie, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ScOperationDie:
            _self = None
        else:
            _self = self
        this = _pm.new_ScOperationDie(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_ScOperationDie
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pm.disown_ScOperationDie(self)
        return weakref_proxy(self)
    def genActCond(self, *args): return _pm.ScOperationDie_genActCond(self, *args)
    def activateImpl(self, *args): return _pm.ScOperationDie_activateImpl(self, *args)
ScOperationDie_swigregister = _pm.ScOperationDie_swigregister
ScOperationDie_swigregister(ScOperationDie)

class ScOperationChangeType(ScOperationElChange):
    __swig_setmethods__ = {}
    for _s in [ScOperationElChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScOperationChangeType, name, value)
    __swig_getmethods__ = {}
    for _s in [ScOperationElChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScOperationChangeType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ScOperationChangeType:
            _self = None
        else:
            _self = self
        this = _pm.new_ScOperationChangeType(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_ScOperationChangeType
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pm.disown_ScOperationChangeType(self)
        return weakref_proxy(self)
    def genActCond(self, *args): return _pm.ScOperationChangeType_genActCond(self, *args)
    def activateImpl(self, *args): return _pm.ScOperationChangeType_activateImpl(self, *args)
ScOperationChangeType_swigregister = _pm.ScOperationChangeType_swigregister
ScOperationChangeType_swigregister(ScOperationChangeType)

class basic_advanced_activity(sc_activity):
    __swig_setmethods__ = {}
    for _s in [sc_activity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_advanced_activity, name, value)
    __swig_getmethods__ = {}
    for _s in [sc_activity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, basic_advanced_activity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pm.delete_basic_advanced_activity
    __del__ = lambda self : None;
    def init(self, *args): return _pm.basic_advanced_activity_init(self, *args)
    def done(self): return _pm.basic_advanced_activity_done(self)
    def get_sign(self): return _pm.basic_advanced_activity_get_sign(self)
basic_advanced_activity_swigregister = _pm.basic_advanced_activity_swigregister
basic_advanced_activity_swigregister(basic_advanced_activity)


def scp_core_init(*args):
  return _pm.scp_core_init(*args)
scp_core_init = _pm.scp_core_init
SCP_FOI_HONOR_SET_ = _pm.SCP_FOI_HONOR_SET_
class scp_process_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scp_process_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scp_process_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["session"] = _pm.scp_process_info_session_set
    __swig_getmethods__["session"] = _pm.scp_process_info_session_get
    if _newclass:session = _swig_property(_pm.scp_process_info_session_get, _pm.scp_process_info_session_set)
    __swig_setmethods__["process"] = _pm.scp_process_info_process_set
    __swig_getmethods__["process"] = _pm.scp_process_info_process_get
    if _newclass:process = _swig_property(_pm.scp_process_info_process_get, _pm.scp_process_info_process_set)
    __swig_setmethods__["var_value"] = _pm.scp_process_info_var_value_set
    __swig_getmethods__["var_value"] = _pm.scp_process_info_var_value_get
    if _newclass:var_value = _swig_property(_pm.scp_process_info_var_value_get, _pm.scp_process_info_var_value_set)
    __swig_setmethods__["auto_dirent"] = _pm.scp_process_info_auto_dirent_set
    __swig_getmethods__["auto_dirent"] = _pm.scp_process_info_auto_dirent_get
    if _newclass:auto_dirent = _swig_property(_pm.scp_process_info_auto_dirent_get, _pm.scp_process_info_auto_dirent_set)
    __swig_setmethods__["defaultseg_sign"] = _pm.scp_process_info_defaultseg_sign_set
    __swig_getmethods__["defaultseg_sign"] = _pm.scp_process_info_defaultseg_sign_get
    if _newclass:defaultseg_sign = _swig_property(_pm.scp_process_info_defaultseg_sign_get, _pm.scp_process_info_defaultseg_sign_set)
    __swig_setmethods__["program"] = _pm.scp_process_info_program_set
    __swig_getmethods__["program"] = _pm.scp_process_info_program_get
    if _newclass:program = _swig_property(_pm.scp_process_info_program_get, _pm.scp_process_info_program_set)
    __swig_setmethods__["vars"] = _pm.scp_process_info_vars_set
    __swig_getmethods__["vars"] = _pm.scp_process_info_vars_get
    if _newclass:vars = _swig_property(_pm.scp_process_info_vars_get, _pm.scp_process_info_vars_set)
    __swig_setmethods__["consts"] = _pm.scp_process_info_consts_set
    __swig_getmethods__["consts"] = _pm.scp_process_info_consts_get
    if _newclass:consts = _swig_property(_pm.scp_process_info_consts_get, _pm.scp_process_info_consts_set)
    __swig_setmethods__["active_op"] = _pm.scp_process_info_active_op_set
    __swig_getmethods__["active_op"] = _pm.scp_process_info_active_op_get
    if _newclass:active_op = _swig_property(_pm.scp_process_info_active_op_get, _pm.scp_process_info_active_op_set)
    __swig_getmethods__["get_father"] = lambda x: _pm.scp_process_info_get_father
    if _newclass:get_father = staticmethod(_pm.scp_process_info_get_father)
    __swig_getmethods__["get_opened_segs"] = lambda x: _pm.scp_process_info_get_opened_segs
    if _newclass:get_opened_segs = staticmethod(_pm.scp_process_info_get_opened_segs)
    __swig_getmethods__["get_default_seg"] = lambda x: _pm.scp_process_info_get_default_seg
    if _newclass:get_default_seg = staticmethod(_pm.scp_process_info_get_default_seg)
    __swig_getmethods__["set_default_seg"] = lambda x: _pm.scp_process_info_set_default_seg
    if _newclass:set_default_seg = staticmethod(_pm.scp_process_info_set_default_seg)
    __swig_getmethods__["get_active_op"] = lambda x: _pm.scp_process_info_get_active_op
    if _newclass:get_active_op = staticmethod(_pm.scp_process_info_get_active_op)
    __swig_getmethods__["get_program"] = lambda x: _pm.scp_process_info_get_program
    if _newclass:get_program = staticmethod(_pm.scp_process_info_get_program)
    __swig_getmethods__["get_tracer"] = lambda x: _pm.scp_process_info_get_tracer
    if _newclass:get_tracer = staticmethod(_pm.scp_process_info_get_tracer)
    __swig_getmethods__["set_tracer"] = lambda x: _pm.scp_process_info_set_tracer
    if _newclass:set_tracer = staticmethod(_pm.scp_process_info_set_tracer)
    __swig_getmethods__["is_traced"] = lambda x: _pm.scp_process_info_is_traced
    if _newclass:is_traced = staticmethod(_pm.scp_process_info_is_traced)
    __swig_getmethods__["set_traced"] = lambda x: _pm.scp_process_info_set_traced
    if _newclass:set_traced = staticmethod(_pm.scp_process_info_set_traced)
    __swig_getmethods__["is_step_tracing"] = lambda x: _pm.scp_process_info_is_step_tracing
    if _newclass:is_step_tracing = staticmethod(_pm.scp_process_info_is_step_tracing)
    __swig_getmethods__["set_step_tracing"] = lambda x: _pm.scp_process_info_set_step_tracing
    if _newclass:set_step_tracing = staticmethod(_pm.scp_process_info_set_step_tracing)
    __swig_getmethods__["set_error"] = lambda x: _pm.scp_process_info_set_error
    if _newclass:set_error = staticmethod(_pm.scp_process_info_set_error)
    def __init__(self): 
        this = _pm.new_scp_process_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pm.delete_scp_process_info
    __del__ = lambda self : None;
scp_process_info_swigregister = _pm.scp_process_info_swigregister
scp_process_info_swigregister(scp_process_info)

def scp_process_info_get_father(*args):
  return _pm.scp_process_info_get_father(*args)
scp_process_info_get_father = _pm.scp_process_info_get_father

def scp_process_info_get_opened_segs(*args):
  return _pm.scp_process_info_get_opened_segs(*args)
scp_process_info_get_opened_segs = _pm.scp_process_info_get_opened_segs

def scp_process_info_get_default_seg(*args):
  return _pm.scp_process_info_get_default_seg(*args)
scp_process_info_get_default_seg = _pm.scp_process_info_get_default_seg

def scp_process_info_set_default_seg(*args):
  return _pm.scp_process_info_set_default_seg(*args)
scp_process_info_set_default_seg = _pm.scp_process_info_set_default_seg

def scp_process_info_get_active_op(*args):
  return _pm.scp_process_info_get_active_op(*args)
scp_process_info_get_active_op = _pm.scp_process_info_get_active_op

def scp_process_info_get_program(*args):
  return _pm.scp_process_info_get_program(*args)
scp_process_info_get_program = _pm.scp_process_info_get_program

def scp_process_info_get_tracer(*args):
  return _pm.scp_process_info_get_tracer(*args)
scp_process_info_get_tracer = _pm.scp_process_info_get_tracer

def scp_process_info_set_tracer(*args):
  return _pm.scp_process_info_set_tracer(*args)
scp_process_info_set_tracer = _pm.scp_process_info_set_tracer

def scp_process_info_is_traced(*args):
  return _pm.scp_process_info_is_traced(*args)
scp_process_info_is_traced = _pm.scp_process_info_is_traced

def scp_process_info_set_traced(*args):
  return _pm.scp_process_info_set_traced(*args)
scp_process_info_set_traced = _pm.scp_process_info_set_traced

def scp_process_info_is_step_tracing(*args):
  return _pm.scp_process_info_is_step_tracing(*args)
scp_process_info_is_step_tracing = _pm.scp_process_info_is_step_tracing

def scp_process_info_set_step_tracing(*args):
  return _pm.scp_process_info_set_step_tracing(*args)
scp_process_info_set_step_tracing = _pm.scp_process_info_set_step_tracing

def scp_process_info_set_error(*args):
  return _pm.scp_process_info_set_error(*args)
scp_process_info_set_error = _pm.scp_process_info_set_error


def get_init_op(*args):
  return _pm.get_init_op(*args)
get_init_op = _pm.get_init_op

def get_next_op(*args):
  return _pm.get_next_op(*args)
get_next_op = _pm.get_next_op

def has_op_debug_info(*args):
  return _pm.has_op_debug_info(*args)
has_op_debug_info = _pm.has_op_debug_info

def get_op_line(*args):
  return _pm.get_op_line(*args)
get_op_line = _pm.get_op_line

def get_op_type(*args):
  return _pm.get_op_type(*args)
get_op_type = _pm.get_op_type

def get_addr_full_uri(*args):
  return _pm.get_addr_full_uri(*args)
get_addr_full_uri = _pm.get_addr_full_uri

def get_addr_idtf(*args):
  return _pm.get_addr_idtf(*args)
get_addr_idtf = _pm.get_addr_idtf
SCP_STATE_THEN = _pm.SCP_STATE_THEN
SCP_STATE_ELSE = _pm.SCP_STATE_ELSE
SCP_STATE_REPEAT = _pm.SCP_STATE_REPEAT
SCP_STATE_CONTROL_MASK = _pm.SCP_STATE_CONTROL_MASK
SCP_STATE_SLEEP = _pm.SCP_STATE_SLEEP
SCP_STATE_RUN = _pm.SCP_STATE_RUN
SCP_STATE_SCHED_MASK = _pm.SCP_STATE_SCHED_MASK
SCP_STATE_DEAD = _pm.SCP_STATE_DEAD
SCP_STATE_ERROR = _pm.SCP_STATE_ERROR

def scp_set_state(*args):
  return _pm.scp_set_state(*args)
scp_set_state = _pm.scp_set_state

def scp_check_state(*args):
  return _pm.scp_check_state(*args)
scp_check_state = _pm.scp_check_state

def scp_fill_process_info(*args):
  return _pm.scp_fill_process_info(*args)
scp_fill_process_info = _pm.scp_fill_process_info

def scp_call_program(*args):
  return _pm.scp_call_program(*args)
scp_call_program = _pm.scp_call_program

def finalize_process(*args):
  return _pm.finalize_process(*args)
finalize_process = _pm.finalize_process

def scp_sleep_on_child(*args):
  return _pm.scp_sleep_on_child(*args)
scp_sleep_on_child = _pm.scp_sleep_on_child

def create_orphaned_son(*args):
  return _pm.create_orphaned_son(*args)
create_orphaned_son = _pm.create_orphaned_son

def construct_fictive_process(*args):
  return _pm.construct_fictive_process(*args)
construct_fictive_process = _pm.construct_fictive_process

def erase_fictive_process(*args):
  return _pm.erase_fictive_process(*args)
erase_fictive_process = _pm.erase_fictive_process

def scp_spawn_process(*args):
  return _pm.scp_spawn_process(*args)
scp_spawn_process = _pm.scp_spawn_process

def parse_package(*args):
  return _pm.parse_package(*args)
parse_package = _pm.parse_package

def spawn_package(*args):
  return _pm.spawn_package(*args)
spawn_package = _pm.spawn_package

def spawn_package_ex(*args):
  return _pm.spawn_package_ex(*args)
spawn_package_ex = _pm.spawn_package_ex

def run_package(*args):
  return _pm.run_package(*args)
run_package = _pm.run_package

def scp_package_init(*args):
  return _pm.scp_package_init(*args)
scp_package_init = _pm.scp_package_init

def scp_package_locate_program_text(*args):
  return _pm.scp_package_locate_program_text(*args)
scp_package_locate_program_text = _pm.scp_package_locate_program_text

def scp_package_run_program(*args):
  return _pm.scp_package_run_program(*args)
scp_package_run_program = _pm.scp_package_run_program


def scp_create_process(*args):
  return _pm.scp_create_process(*args)
scp_create_process = _pm.scp_create_process

def scp_process_return(*args):
  return _pm.scp_process_return(*args)
scp_process_return = _pm.scp_process_return

